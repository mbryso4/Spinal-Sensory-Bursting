classdef SpinalSensoryBursting < matlab.apps.AppBase

    % Properties that correspond to app components
    properties (Access = public)
        SpinalModSensory                matlab.ui.Figure
        FileMenu                        matlab.ui.container.Menu
        OpendatatoanalyzeMenu           matlab.ui.container.Menu
        ExportdatatoExcelMenu           matlab.ui.container.Menu
        Menu                            matlab.ui.container.Menu
        ClearallButton                  matlab.ui.control.Button
        StimSwitch                      matlab.ui.control.Switch
        PlotspikerastersButton          matlab.ui.control.Button
        SpinalLevelEditField_3          matlab.ui.control.NumericEditField
        SpinalLevelEditField_3Label     matlab.ui.control.Label
        SpinalLevelEditField_2          matlab.ui.control.NumericEditField
        SpinalLevelEditField_2Label     matlab.ui.control.Label
        LowPassSwitch                   matlab.ui.control.Switch
        HighPassSwitch                  matlab.ui.control.Switch
        LowPassKHzKnob                  matlab.ui.control.Knob
        LowPassKHzKnobLabel             matlab.ui.control.Label
        HighPassHzKnob                  matlab.ui.control.Knob
        HighPassHzKnobLabel             matlab.ui.control.Label
        DisplayFileName                 matlab.ui.control.EditField
        FileNameLabel                   matlab.ui.control.Label
        RunPhaseAnalysisButton          matlab.ui.control.Button
        RunBurstAnalysisButton          matlab.ui.control.Button
        Channel8Panel                   matlab.ui.container.Panel
        SpinalLevelEditField_7          matlab.ui.control.NumericEditField
        SpinalLevelEditField_7Label     matlab.ui.control.Label
        MininterbursttimemsEditField_7  matlab.ui.control.NumericEditField
        MininterbursttimemsEditField_7Label  matlab.ui.control.Label
        MinburstdurationmsEditField_8   matlab.ui.control.NumericEditField
        MinburstdurationmsEditField_8Label  matlab.ui.control.Label
        Channel7Panel                   matlab.ui.container.Panel
        SpinalLevelEditField_8          matlab.ui.control.NumericEditField
        SpinalLevelEditField_8Label     matlab.ui.control.Label
        MininterbursttimemsEditField_6  matlab.ui.control.NumericEditField
        MininterbursttimemsEditField_6Label  matlab.ui.control.Label
        MinburstdurationmsEditField_7   matlab.ui.control.NumericEditField
        MinburstdurationmsEditField_7Label  matlab.ui.control.Label
        Channel6Panel                   matlab.ui.container.Panel
        SpinalLevelEditField_6          matlab.ui.control.NumericEditField
        SpinalLevelEditField_6Label     matlab.ui.control.Label
        MininterbursttimemsEditField_5  matlab.ui.control.NumericEditField
        MininterbursttimemsEditField_5Label  matlab.ui.control.Label
        MinburstdurationmsEditField_6   matlab.ui.control.NumericEditField
        MinburstdurationmsEditField_6Label  matlab.ui.control.Label
        Channel5Panel                   matlab.ui.container.Panel
        SpinalLevelEditField_5          matlab.ui.control.NumericEditField
        SpinalLevelEditField_5Label     matlab.ui.control.Label
        MininterbursttimemsEditField_4  matlab.ui.control.NumericEditField
        MininterbursttimemsEditField_4Label  matlab.ui.control.Label
        MinburstdurationmsEditField_5   matlab.ui.control.NumericEditField
        MinburstdurationmsEditField_5Label  matlab.ui.control.Label
        Channel4Panel                   matlab.ui.container.Panel
        SpinalLevelEditField_4          matlab.ui.control.NumericEditField
        SpinalLevelEditField_4Label     matlab.ui.control.Label
        MininterbursttimemsEditField_3  matlab.ui.control.NumericEditField
        MininterbursttimemsEditField_3Label  matlab.ui.control.Label
        MinburstdurationmsEditField_4   matlab.ui.control.NumericEditField
        MinburstdurationmsEditField_4Label  matlab.ui.control.Label
        Channel3Panel                   matlab.ui.container.Panel
        MininterbursttimemsEditField_2  matlab.ui.control.NumericEditField
        MininterbursttimemsEditField_2Label  matlab.ui.control.Label
        MinburstdurationmsEditField_3   matlab.ui.control.NumericEditField
        MinburstdurationmsEditField_3Label  matlab.ui.control.Label
        Channel2Panel                   matlab.ui.container.Panel
        MininterbursttimemsEditField    matlab.ui.control.NumericEditField
        MininterbursttimemsEditFieldLabel  matlab.ui.control.Label
        MinburstdurationmsEditField_2   matlab.ui.control.NumericEditField
        MinburstdurationmsEditField_2Label  matlab.ui.control.Label
        Panel_2                         matlab.ui.container.Panel
        PhaseTable                      matlab.ui.control.Table
        ComparisonchannelDropDown       matlab.ui.control.DropDown
        ComparisonchannelDropDownLabel  matlab.ui.control.Label
        BuffertimemsEditField           matlab.ui.control.EditField
        BuffertimemsEditFieldLabel      matlab.ui.control.Label
        PostStimulationWindowsEditField  matlab.ui.control.EditField
        PostStimulationWindowsEditFieldLabel  matlab.ui.control.Label
        BurstFrequencyHzLabel           matlab.ui.control.Label
        BurstFrequency                  matlab.ui.control.Table
        PercentageoftimethatburstscooccurLabel  matlab.ui.control.Label
        UITable                         matlab.ui.control.Table
        Waveform                        matlab.ui.control.UIAxes
        RasterPlot                      matlab.ui.control.UIAxes
        PowerSpec                       matlab.ui.control.UIAxes
        Panel                           matlab.ui.container.Panel
        StimEditField_8                 matlab.ui.control.NumericEditField
        StimulusLabel_8                 matlab.ui.control.Label
        StimEditField_7                 matlab.ui.control.NumericEditField
        StimulusLabel_7                 matlab.ui.control.Label
        StimEditField_6                 matlab.ui.control.NumericEditField
        StimulusLabel_6                 matlab.ui.control.Label
        StimEditField_5                 matlab.ui.control.NumericEditField
        StimulusLabel_5                 matlab.ui.control.Label
        StimEditField_4                 matlab.ui.control.NumericEditField
        StimulusLabel_4                 matlab.ui.control.Label
        StimEditField_3                 matlab.ui.control.NumericEditField
        StimulusLabel_3                 matlab.ui.control.Label
        StimEditField_2                 matlab.ui.control.NumericEditField
        StimulusLabel_2                 matlab.ui.control.Label
        StimEditField_1                 matlab.ui.control.NumericEditField
        StimulusLabel                   matlab.ui.control.Label
        BurstcountEditField_8           matlab.ui.control.NumericEditField
        BurstcountEditField_8Label      matlab.ui.control.Label
        ThresholdEditField_8            matlab.ui.control.NumericEditField
        ThresholdEditField_8Label       matlab.ui.control.Label
        BurstcountEditField_7           matlab.ui.control.NumericEditField
        BurstcountEditField_7Label      matlab.ui.control.Label
        ThresholdEditField_7            matlab.ui.control.NumericEditField
        ThresholdEditField_7Label       matlab.ui.control.Label
        BurstcountEditField_6           matlab.ui.control.NumericEditField
        BurstcountEditField_6Label      matlab.ui.control.Label
        ThresholdEditField_6            matlab.ui.control.NumericEditField
        ThresholdEditField_6Label       matlab.ui.control.Label
        BurstcountEditField_5           matlab.ui.control.NumericEditField
        BurstcountEditField_5Label      matlab.ui.control.Label
        ThresholdEditField_5            matlab.ui.control.NumericEditField
        ThresholdEditField_5Label       matlab.ui.control.Label
        BurstcountEditField_4           matlab.ui.control.NumericEditField
        BurstcountEditField_4Label      matlab.ui.control.Label
        ThresholdEditField_4            matlab.ui.control.NumericEditField
        ThresholdEditField_4Label       matlab.ui.control.Label
        BurstcountEditField_3           matlab.ui.control.NumericEditField
        BurstcountEditField_3Label      matlab.ui.control.Label
        ThresholdEditField_3            matlab.ui.control.NumericEditField
        ThresholdEditField_3Label       matlab.ui.control.Label
        BurstcountEditField_2           matlab.ui.control.NumericEditField
        BurstcountEditField_2Label      matlab.ui.control.Label
        ThresholdEditField_2            matlab.ui.control.NumericEditField
        ThresholdEditField_2Label       matlab.ui.control.Label
        BurstcountEditField_1           matlab.ui.control.NumericEditField
        BurstcountEditFieldLabel        matlab.ui.control.Label
        ThresholdEditField_1            matlab.ui.control.NumericEditField
        ThresholdEditFieldLabel         matlab.ui.control.Label
        RemoveStimulusArtifactButton_8  matlab.ui.control.Button
        RemoveStimulusArtifactButton_7  matlab.ui.control.Button
        RemoveStimulusArtifactButton_6  matlab.ui.control.Button
        RemoveStimulusArtifactButton_5  matlab.ui.control.Button
        RemoveStimulusArtifactButton_4  matlab.ui.control.Button
        RemoveStimulusArtifactButton_3  matlab.ui.control.Button
        RemoveStimulusArtifactButton_2  matlab.ui.control.Button
        RemoveStimulusArtifactButton_1  matlab.ui.control.Button
        BurstDetectionDropDown_8        matlab.ui.control.DropDown
        BurstDetectionDropDown_8Label   matlab.ui.control.Label
        BurstDetectionDropDown_7        matlab.ui.control.DropDown
        BurstDetectionDropDown_7Label   matlab.ui.control.Label
        BurstDetectionDropDown_6        matlab.ui.control.DropDown
        BurstDetectionDropDown_6Label   matlab.ui.control.Label
        BurstDetectionDropDown_5        matlab.ui.control.DropDown
        BurstDetectionDropDown_5Label   matlab.ui.control.Label
        BurstDetectionDropDown_4        matlab.ui.control.DropDown
        BurstDetectionDropDown_4Label   matlab.ui.control.Label
        BurstDetectionDropDown_3        matlab.ui.control.DropDown
        BurstDetectionDropDown_3Label   matlab.ui.control.Label
        BurstDetectionDropDown_2        matlab.ui.control.DropDown
        BurstDetectionDropDown_2Label   matlab.ui.control.Label
        BurstDetectionDropDown_1        matlab.ui.control.DropDown
        BurstDetectionLabel             matlab.ui.control.Label
        UIAxes_8                        matlab.ui.control.UIAxes
        UIAxes_4                        matlab.ui.control.UIAxes
        UIAxes_3                        matlab.ui.control.UIAxes
        UIAxes_7                        matlab.ui.control.UIAxes
        UIAxes_6                        matlab.ui.control.UIAxes
        UIAxes_5                        matlab.ui.control.UIAxes
        UIAxes_2                        matlab.ui.control.UIAxes
        UIAxes_1                        matlab.ui.control.UIAxes
        Channel1Panel                   matlab.ui.container.Panel
        SpinalLevelEditField_1          matlab.ui.control.NumericEditField
        SpinalLevelEditFieldLabel       matlab.ui.control.Label
        MinburstdurationmsEditField_1   matlab.ui.control.NumericEditField
        MinburstdurationmsEditFieldLabel  matlab.ui.control.Label
        MinInterrbursttimemsEditField_1  matlab.ui.control.NumericEditField
        MinInterrbursttimemsEditFieldLabel  matlab.ui.control.Label
    end


    properties (Access = private)
        %Set default values for graphing options
        Pax;
        MinInterBurstTime1 = 200;
        MinBurstDuration1 =  50;
        MinInterBurstTime2 = 200;
        MinBurstDuration2 =  50;
        MinInterBurstTime3 = 200;
        MinBurstDuration3 =  50;
        MinInterBurstTime4 = 200;
        MinBurstDuration4 =  50;
        MinInterBurstTime5 = 200;
        MinBurstDuration5 =  50;
        MinInterBurstTime6 = 200;
        MinBurstDuration6 =  50;
        MinInterBurstTime7 = 200;
        MinBurstDuration7 =  50;
        MinInterBurstTime8 = 200;
        MinBurstDuration8 =  50;
        HighPassValue  = 10;
        LowPassValue  =  0;
        HighPassSwitchVal = 'On';
        LowPassSwitchVal = 'Off';
        TriggerState1 = 0;
        TriggerState2 = 0;
        TriggerState3 = 0;
        TriggerState4 = 0;
        TriggerState5 = 0;
        TriggerState6 = 0;
        TriggerState7 = 0;
        TriggerState8 = 0;
        HoldTable =  [];
        HoldTableTitle = ["Mean Duration(samples)", "StDev Duration(samples)", "Mean Duration(s)",...
            "StDev Duration(seconds)", "Mean Peak Amplitude", "StDev Peak Amplitude",...
            "Mean Rectified Integrated Trace", "StDeV Rectified Integrated Trace",...
            "Number of Bursts", "Mean number of interburst spikes", "Burst Frequency"];
        bigpeaks1 = [];
        biglocs1 = [];
        burstplot1 = [];
        burstleft1 = [];
        burstright1 = [];
        firstloc1 = [];
        lastloc1 = [];
        bigpeaks2 = [];
        biglocs2 = [];
        burstplot2 = [];
        burstleft2 = [];
        burstright2 = [];
        firstloc2 = [];
        lastloc2 = [];
        bigpeaks3 = [];
        biglocs3 = [];
        burstplot3 = [];
        burstleft3 = [];
        burstright3 = [];
        firstloc3 = [];
        lastloc3 = [];
        bigpeaks4 = [];
        biglocs4 = [];
        burstplot4 = [];
        burstleft4 = [];
        burstright4 = [];
        firstloc4 = [];
        lastloc4 = [];
        bigpeaks5 = [];
        biglocs5 = [];
        burstplot5 = [];
        burstleft5 = [];
        burstright5 = [];
        firstloc5 = [];
        lastloc5 = [];
        bigpeaks6 = [];
        biglocs6 = [];
        burstplot6 = [];
        burstleft6 = [];
        burstright6 = [];
        firstloc6 = [];
        lastloc6 = [];
        bigpeaks7 = [];
        biglocs7 = [];
        burstplot7 = [];
        burstleft7 = [];
        burstright7 = [];
        firstloc7 = [];
        lastloc7 = [];
        bigpeaks8 = [];
        biglocs8 = [];
        burstplot8 = [];
        burstleft8 = [];
        burstright8 = [];
        firstloc8 = [];
        lastloc8 = [];
        p1 = [];
        f1 = [];
        p2 = [];
        f2 = [];
        p3 = [];
        f3 = [];
        p4 = [];
        f4 = [];
        p5 = [];
        f5 = [];
        p6 = [];
        f6 = [];
        p7 = [];
        f7 = [];
        p8 = [];
        f8 = [];
        RasterData = NaN(8,500);
        CoBurstTable = [];
        AllBurstTimes = [];
        StimTimes = nan(8, 200);


        %Set default value for burst thresholding
        BurstThreshChoice=[1;1;1;1;1;1;1;1];%<-Change the default selection for burst threshold here
        %See the function BurstThresh  for  further options
        filtered = [];
        data = [];
        rawdata = [];
        ChannelsUsed = zeros(8,1)
        FieldNames = [];
        sampfreq = [];
        BurstThresh=[];
        WaveOnStem=[];
        WaveOnStem2=[];
        filename='xxxxxxx.abf';
        IsSaveSet=0;
        SaveAsPathway=[];
        VarCount=[];
        TriggerState = 0;
        InValue = [];
        pathname = 'TITLE / FILENAME';
        FileName = [];
        PathName = [];
        phitable = [];
        powerspectrum = [];
    end

    methods (Access = public)

    end

    methods (Access = private)

        function TimeToGraph(app)
            cla(app.UIAxes_1);
            cla(app.UIAxes_2);
            cla(app.UIAxes_3);
            cla(app.UIAxes_4);
            cla(app.UIAxes_5);
            cla(app.UIAxes_6);
            cla(app.UIAxes_7);
            cla(app.UIAxes_8);
            hold(app.UIAxes_1, 'on');
            hold(app.UIAxes_2, 'on');
            hold(app.UIAxes_3, 'on');
            hold(app.UIAxes_4, 'on');
            hold(app.UIAxes_5, 'on');
            hold(app.UIAxes_6, 'on');
            hold(app.UIAxes_7, 'on');
            hold(app.UIAxes_8, 'on');
            hold(app.PowerSpec, 'on');
            if app.ChannelsUsed(1)==1
                plot(app.UIAxes_1, app.data(1,:),'g');
                plot(app.UIAxes_1, app.filtered(1,:), 'k'); %Plots the filtered data
                app.f1 = app.f1(~isnan(app.f1));
                app.p1 = app.p1(~isnan(app.p1));
                plot(app.PowerSpec, app.f1, app.p1);
                app.bigpeaks1 = app.bigpeaks1(~isnan(app.bigpeaks1));
                app.biglocs1 = app.biglocs1(~isnan(app.biglocs1));
                app.firstloc1 = app.firstloc1(~isnan(app.firstloc1));
                app.firstloc1 = app.firstloc1((app.firstloc1) ~=  0);
                app.lastloc1 = app.lastloc1(~isnan(app.lastloc1));
                if  ~isempty(app.bigpeaks1)
                    app.burstplot1 = [];
                    if ~isempty(app.burstplot1)
                        delete(app.UIAxes_1, app.burstplot1);
                    end
                    app.burstplot1 = plot(app.UIAxes_1, app.biglocs1, app.bigpeaks1, 'r*');
                    for i = 1:length(app.firstloc1)
                        app.burstleft1 = [];
                        app.burstright1 = [];
                        hold(app.Waveform, 'on')
                        plot(app.Waveform, app.filtered(1,app.firstloc1(i)-100:app.lastloc1(i)+100))
                        if ~isempty(app.burstleft1)
                            app.burstleft1 = [];
                        end
                        if ~isempty(app.burstright1)
                            app.burstright1 = [];
                        end
                        app.burstleft1 = xline(app.UIAxes_1, app.firstloc1(i),  '-.', 'Color', [17 17  17]/255);
                        app.burstright1 =  xline(app.UIAxes_1, app.lastloc1(i),  '-.', 'Color', [17 17  17]/255);
                        app.BurstcountEditField_1.Value = length(app.biglocs1);
                    end
                end
            end
            if app.ChannelsUsed(2)==1
                plot(app.UIAxes_2, app.data(2,:),'g');
                plot(app.UIAxes_2, app.filtered(2,:), 'k'); %Plots the filtered data
                app.f2 = app.f2(~isnan(app.f2));
                app.p2 = app.p2(~isnan(app.p2));
                plot(app.PowerSpec, app.f2, app.p2)
                app.bigpeaks2 = app.bigpeaks2(~isnan(app.bigpeaks2));
                app.biglocs2 = app.biglocs2(~isnan(app.biglocs2));
                app.firstloc2 = app.firstloc2(~isnan(app.firstloc2));
                app.firstloc2 = app.firstloc2((app.firstloc2) ~=  0);
                app.lastloc2 = app.lastloc2(~isnan(app.lastloc2));
                if  ~isempty(app.bigpeaks2)
                    app.burstplot2 = [];
                    if ~isempty(app.burstplot2)
                        delete(app.UIAxes_2, app.burstplot2);
                    end
                    app.burstplot2 = plot(app.UIAxes_2, app.biglocs2, app.bigpeaks2, 'r*');
                    for i = 2:length(app.firstloc2)
                        app.burstleft2 = [];
                        app.burstright2 = [];
                        plot(app.Waveform, app.filtered(2,app.firstloc2(i)-100:app.lastloc2(i)+100))
                        if ~isempty(app.burstleft2)
                            app.burstleft2 = [];
                        end
                        if ~isempty(app.burstright2)
                            app.burstright2 = [];
                        end
                        app.burstleft2 = xline(app.UIAxes_2, app.firstloc2(i),  '-.', 'Color', [17 17 17]/255);
                        app.burstright2 =  xline(app.UIAxes_2, app.lastloc2(i),  '-.', 'Color', [17 17 17]/255);
                        app.BurstcountEditField_2.Value = length(app.biglocs2);
                    end
                end
            end
            if app.ChannelsUsed(3)==1
                plot(app.UIAxes_3, app.data(3,:),'g');
                plot(app.UIAxes_3, app.filtered(3,:), 'k'); %Plots the filtered data
                app.f3 = app.f3(~isnan(app.f3));
                app.p3 = app.p3(~isnan(app.p3));
                plot(app.PowerSpec, app.f3, app.p3)
                app.bigpeaks3 = app.bigpeaks3(~isnan(app.bigpeaks3));
                app.biglocs3 = app.biglocs3(~isnan(app.biglocs3));
                app.firstloc3 = app.firstloc3(~isnan(app.firstloc3));
                app.firstloc3 = app.firstloc3((app.firstloc3) ~=  0);
                app.lastloc3 = app.lastloc3(~isnan(app.lastloc3));
                if  ~isempty(app.bigpeaks3)
                    app.burstplot3 = [];
                    if ~isempty(app.burstplot3)
                        delete(app.UIAxes_3, app.burstplot3);
                    end
                    app.burstplot3 = plot(app.UIAxes_3, app.biglocs3, app.bigpeaks3, 'r*');
                    for i = 3:length(app.firstloc3)
                        app.burstleft3 = [];
                        app.burstright3 = [];
                        plot(app.Waveform, app.filtered(3,app.firstloc3(i)-100:app.lastloc3(i)+100))
                        if ~isempty(app.burstleft3)
                            app.burstleft3 = [];
                        end
                        if ~isempty(app.burstright3)
                            app.burstright3 = [];
                        end
                        app.burstleft3 = xline(app.UIAxes_3, app.firstloc3(i),  '-.', 'Color', [17 17 17]/255);
                        app.burstright3 =  xline(app.UIAxes_3, app.lastloc3(i),  '-.', 'Color', [17 17 17]/255);
                        app.BurstcountEditField_3.Value = length(app.biglocs3);
                    end
                end
            end
            if app.ChannelsUsed(4)==1
                plot(app.UIAxes_4, app.data(4,:),'g');
                plot(app.UIAxes_4, app.filtered(4,:), 'k'); %Plots the filtered data
                app.f4 = app.f4(~isnan(app.f4));
                app.p4 = app.p4(~isnan(app.p4));
                plot(app.PowerSpec, app.f4, app.p4)
                app.bigpeaks4 = app.bigpeaks4(~isnan(app.bigpeaks4));
                app.biglocs4 = app.biglocs4(~isnan(app.biglocs4));
                app.firstloc4 = app.firstloc4(~isnan(app.firstloc4));
                app.firstloc4 = app.firstloc4((app.firstloc4) ~=  0);
                app.lastloc4 = app.lastloc4(~isnan(app.lastloc4));
                if  ~isempty(app.bigpeaks4)
                    app.burstplot4 = [];
                    if ~isempty(app.burstplot4)
                        delete(app.UIAxes_4, app.burstplot4);
                    end
                    app.burstplot4 = plot(app.UIAxes_4, app.biglocs4, app.bigpeaks4, 'r*');
                    for i = 4:length(app.firstloc4)
                        app.burstleft4 = [];
                        app.burstright4 = [];
                        plot(app.Waveform, app.filtered(4,app.firstloc4(i)-100:app.lastloc4(i)+100))
                        if ~isempty(app.burstleft4)
                            app.burstleft4 = [];
                        end
                        if ~isempty(app.burstright4)
                            app.burstright4 = [];
                        end
                        app.burstleft4 = xline(app.UIAxes_4, app.firstloc4(i),  '-.', 'Color', [17 17 17]/255);
                        app.burstright4 =  xline(app.UIAxes_4, app.lastloc4(i),  '-.', 'Color', [17 17 17]/255);
                        app.BurstcountEditField_4.Value = length(app.biglocs4);
                    end
                end
            end
            if app.ChannelsUsed(5)==1
                plot(app.UIAxes_5, app.data(5,:),'g');
                plot(app.UIAxes_5, app.filtered(5,:), 'k'); %Plots the filtered data
                app.f5 = app.f5(~isnan(app.f5));
                app.p5 = app.p5(~isnan(app.p5));
                plot(app.PowerSpec, app.f5, app.p5)
                app.bigpeaks5 = app.bigpeaks5(~isnan(app.bigpeaks5));
                app.biglocs5 = app.biglocs5(~isnan(app.biglocs5));
                app.firstloc5 = app.firstloc5(~isnan(app.firstloc5));
                app.firstloc5 = app.firstloc5((app.firstloc5) ~=  0);
                app.lastloc5 = app.lastloc5(~isnan(app.lastloc5));
                if  ~isempty(app.bigpeaks5)
                    app.burstplot5 = [];
                    if ~isempty(app.burstplot5)
                        delete(app.UIAxes_5, app.burstplot5);
                    end
                    app.burstplot5 = plot(app.UIAxes_5, app.biglocs5, app.bigpeaks5, 'r*');
                    for i = 5:length(app.firstloc5)
                        app.burstleft5 = [];
                        app.burstright5 = [];
                        plot(app.Waveform, app.filtered(5,app.firstloc5(i)-100:app.lastloc5(i)+100))
                        if ~isempty(app.burstleft5)
                            app.burstleft5 = [];
                        end
                        if ~isempty(app.burstright5)
                            app.burstright5 = [];
                        end
                        app.burstleft5 = xline(app.UIAxes_5, app.firstloc5(i),  '-.', 'Color', [17 17 17]/255);
                        app.burstright5 =  xline(app.UIAxes_5, app.lastloc5(i),  '-.', 'Color', [17 17 17]/255);
                        app.BurstcountEditField_5.Value = length(app.biglocs5);
                    end
                end
            end
            if app.ChannelsUsed(6)==1
                plot(app.UIAxes_6, app.data(6,:),'g');
                plot(app.UIAxes_6, app.filtered(6,:), 'k'); %Plots the filtered data
                app.f6 = app.f6(~isnan(app.f6));
                app.p6 = app.p6(~isnan(app.p6));
                plot(app.PowerSpec, app.f6, app.p6)
                app.bigpeaks6 = app.bigpeaks6(~isnan(app.bigpeaks6));
                app.biglocs6 = app.biglocs6(~isnan(app.biglocs6));
                app.firstloc6 = app.firstloc6(~isnan(app.firstloc6));
                app.firstloc6 = app.firstloc6((app.firstloc6) ~=  0);
                app.lastloc6 = app.lastloc6(~isnan(app.lastloc6));
                if  ~isempty(app.bigpeaks6)
                    app.burstplot6 = [];
                    if ~isempty(app.burstplot6)
                        delete(app.UIAxes_6, app.burstplot6);
                    end
                    app.burstplot6 = plot(app.UIAxes_6, app.biglocs6, app.bigpeaks6, 'r*');
                    for i = 6:length(app.firstloc6)
                        app.burstleft6 = [];
                        app.burstright6 = [];
                        plot(app.Waveform, app.filtered(6,app.firstloc6(i)-100:app.lastloc6(i)+100))
                        if ~isempty(app.burstleft6)
                            app.burstleft6 = [];
                        end
                        if ~isempty(app.burstright6)
                            app.burstright6 = [];
                        end
                        app.burstleft6 = xline(app.UIAxes_6, app.firstloc6(i),  '-.', 'Color', [17 17 17]/255);
                        app.burstright6 =  xline(app.UIAxes_6, app.lastloc6(i),  '-.', 'Color', [17 17 17]/255);
                        app.BurstcountEditField_6.Value = length(app.biglocs6);
                    end
                end
            end
            if app.ChannelsUsed(7)==1
                plot(app.UIAxes_7, app.data(7,:),'g');
                plot(app.UIAxes_7, app.filtered(7,:), 'k'); %Plots the filtered data
                app.f7 = app.f7(~isnan(app.f7));
                app.p7 = app.p7(~isnan(app.p7));
                plot(app.PowerSpec, app.f7, app.p7)
                app.bigpeaks7 = app.bigpeaks7(~isnan(app.bigpeaks7));
                app.biglocs7 = app.biglocs7(~isnan(app.biglocs7));
                app.firstloc7 = app.firstloc7(~isnan(app.firstloc7));
                app.firstloc7 = app.firstloc7((app.firstloc7) ~=  0);
                app.lastloc7 = app.lastloc7(~isnan(app.lastloc7));
                if  ~isempty(app.bigpeaks7)
                    app.burstplot7 = [];
                    if ~isempty(app.burstplot7)
                        delete(app.UIAxes_7, app.burstplot7);
                    end
                    app.burstplot7 = plot(app.UIAxes_7, app.biglocs7, app.bigpeaks7, 'r*');            
                    for i = 7:length(app.firstloc7)
                        app.burstleft7 = [];
                        app.burstright7 = [];
                        plot(app.Waveform, app.filtered(7,app.firstloc7(i)-100:app.lastloc7(i)+100))
                        if ~isempty(app.burstleft7)
                            app.burstleft7 = [];
                        end
                        if ~isempty(app.burstright7)
                            app.burstright7 = [];
                        end
                        app.burstleft7 = xline(app.UIAxes_7, app.firstloc7(i),  '-.', 'Color', [17 17 17]/255);
                        app.burstright7 =  xline(app.UIAxes_7, app.lastloc7(i),  '-.', 'Color', [17 17 17]/255);
                        app.BurstcountEditField_7.Value = length(app.biglocs7);
                    end
                end
            end
            if app.ChannelsUsed(8)==1
                plot(app.UIAxes_8, app.data(8,:),'g');
                plot(app.UIAxes_8, app.filtered(8,:), 'k'); %Plots the filtered data
                app.f8 = app.f8(~isnan(app.f8));
                app.p8 = app.p8(~isnan(app.p8));
                plot(app.PowerSpec, app.f8, app.p8)
                app.bigpeaks8 = app.bigpeaks8(~isnan(app.bigpeaks8));
                app.biglocs8 = app.biglocs8(~isnan(app.biglocs8));
                app.firstloc8 = app.firstloc8(~isnan(app.firstloc8));
                app.firstloc8 = app.firstloc8((app.firstloc8) ~=  0);
                app.lastloc8 = app.lastloc8(~isnan(app.lastloc8));
                if  ~isempty(app.bigpeaks8)
                    app.burstplot8 = [];   
                    if ~isempty(app.burstplot8)
                        delete(app.UIAxes_8, app.burstplot8);
                    end
                    app.burstplot8 = plot(app.UIAxes_8, app.biglocs8, app.bigpeaks8, 'r*');
                    for i = 8:length(app.firstloc8)
                        app.burstleft8 = [];
                        app.burstright8 = [];
                        plot(app.Waveform, app.filtered(8,app.firstloc8(i)-100:app.lastloc8(i)+100))
                        if ~isempty(app.burstleft8)
                            app.burstleft8 = [];
                        end
                        if ~isempty(app.burstright8)
                            app.burstright8 = [];
                        end
                        app.burstleft8 = xline(app.UIAxes_8, app.firstloc8(i),  '-.', 'Color', [17 17 17]/255);
                        app.burstright8 =  xline(app.UIAxes_8, app.lastloc8(i),  '-.', 'Color', [17 17 17]/255);
                        app.BurstcountEditField_8.Value = length(app.biglocs8);
                    end
                end
            end

        end

        function FilterData(app)
            clear wn ftype;
            app.filtered = [];
            ToFilter = find(app.ChannelsUsed > 0);
            si = app.sampfreq/2;
            if app.HighPassSwitch.Value == 49 &  app.LowPassSwitch.Value == 48;
                ftype = 'high';
                n = 4;
                Wn = app.HighPassHzKnob.Value/si;
                for i = 1:length(ToFilter)
                    [B,A] =  butter(n, Wn, ftype);
                    app.filtered(i,:) = abs(filter(B,A, app.data(i,:)));
                end
            elseif app.HighPassSwitch.Value == 48 &  app.LowPassSwitch.Value == 49;
                ftype = 'low';
                n = 4;
                Wn = app.LowPassKHzKnob.Value*1000/si;
                for i = 1:length(ToFilter)
                    [B,A] =  butter(n, Wn, ftype);
                    app.filtered(i,:) =abs(filter(B,A, app.data(i,:)));
                end
            elseif  app.HighPassSwitch.Value == 49 &  app.LowPassSwitch.Value == 49;
                ftype = 'bandpass';
                n = 4;
                Wn = [app.HighPassHzKnob.Value/si, app.LowPassKHzKnob.Value*1000/si]
                for i = length(ToFilter)
                    [B,A] =  butter(n, Wn, ftype);
                    app.filtered(i,:) =abs(filter(B,A, app.data(i,:)));
                end
            else %app.HighPassSwitchVal == 48 & app.LowPassSwitchVal == 48;
                for i = 1:length(ToFilter)
                    app.filtered(i,:) = abs(app.data(i,:));
                end
            end
            TimeToGraph(app)
        end

        function RemoveArtifact(app)
            if app.ChannelsUsed(1) == 1
                if app.TriggerState1 == 1
                    if  abs(max(app.rawdata(1,:))) > abs(min(app.rawdata(1,:)))
                        [pks1 locs1] =  findpeaks(app.rawdata(1,:), 'MinPeakHeight', 300);
                        app.StimTimes(1,1:length(locs1)) = locs1;
                    else
                        [pks1 locs1] =  findpeaks(-app.rawdata(1,:), 'MinPeakHeight', 300);
                        app.StimTimes(1, 1:length(locs1)) = locs1;
                    end
                    for  i=1:length(locs1)
                        app.data(1,locs1(1,i)-(0.010/(1/app.sampfreq)):locs1(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end

            if app.ChannelsUsed(2) == 1
                app.rawdata(2,:) = app.data(2,:);
                if app.TriggerState2 == 1
                    if  abs(max(app.rawdata(2,:))) > abs(min(app.rawdata(2,:)))
                        [pks2 locs2] =  findpeaks(app.rawdata(2,:), 'MinPeakHeight', 300);
                        app.StimTimes(2, 1:length(locs2)) = locs2;
                    else
                        [pks2 locs2] =  findpeaks(-app.rawdata(2,:), 'MinPeakHeight', 300);
                        app.StimTimes(2, 1:length(locs2)) = locs2.';
                    end
                    for  i=1:length(locs2)
                        app.data(2,locs2(1,i)-(0.010/(1/app.sampfreq)):locs2(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end

            if app.ChannelsUsed(3) == 1
                app.rawdata(3,:) = app.data(3,:);
                if app.TriggerState3 == 1
                    if  abs(max(app.rawdata(3,:))) > abs(min(app.rawdata(3,:)))
                        [pks3 locs3] =  findpeaks(app.rawdata(3,:), 'MinPeakHeight', 300);
                        app.StimTimes(3, 1:length(locs3)) = locs3;
                    else
                        [pks3 locs3] =  findpeaks(-app.rawdata(3,:), 'MinPeakHeight', 300);
                        app.StimTimes(3, 1:length(locs3)) = locs3;
                    end
                    for  i=1:length(locs3)
                        app.data(3,locs3(1,i)-(0.010/(1/app.sampfreq)):locs3(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end

            if app.ChannelsUsed(4) == 1
                app.rawdata(4,:) = app.data(4,:);
                if app.TriggerState4 == 1
                    if  abs(max(app.rawdata(4,:))) > abs(min(app.rawdata(4,:)))
                        [pks4 locs4] =  findpeaks(app.rawdata(4,:), 'MinPeakHeight', 300);
                        app.StimTimes(4, 1:length(locs4)) = locs4;
                    else
                        [pks4 locs4] =  findpeaks(-app.rawdata(4,:), 'MinPeakHeight', 300);
                        app.StimTimes(4, 1:length(locs4)) = locs4;
                    end
                    for  i=1:length(locs4)
                        app.data(4,locs4(1,i)-(0.010/(1/app.sampfreq)):locs4(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end

            if app.ChannelsUsed (5) == 1
                app.rawdata(5,:) = app.data(5,:);
                if app.TriggerState5 == 1
                    if  abs(max(app.rawdata(5,:))) > abs(min(app.rawdata(5,:)))
                        [pks5 locs5] =  findpeaks(app.rawdata(5,:), 'MinPeakHeight', 300);
                        app.StimTimes(5, 1:length(locs5)) = locs5;
                    else
                        [pks5 locs5] =  findpeaks(-app.rawdata(5,:), 'MinPeakHeight', 300);
                        app.StimTimes(5, 1:length(locs5)) = locs5;
                    end
                    for  i=1:length(locs5)
                        app.data(5,locs5(1,i)-(0.010/(1/app.sampfreq)):locs5(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end

            if app.ChannelsUsed(6) == 1
                app.rawdata(6,:) = app.data(6,:);
                if app.TriggerState6 == 1
                    if  abs(max(app.rawdata(6,:))) > abs(min(app.rawdata(6,:)))
                        [pks6 locs6] =  findpeaks(app.rawdata(6,:), 'MinPeakHeight', 300);
                        app.StimTimes(6, 1:length(locs6)) = locs6;
                    else
                        [pks6 locs6] =  findpeaks(-app.rawdata(6,:), 'MinPeakHeight', 300);
                        app.StimTimes(6, 1:length(locs6)) = locs6;
                    end
                    for  i=1:length(locs6)
                        app.data(6,locs6(1,i)-(0.010/(1/app.sampfreq)):locs6(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end

            if app.ChannelsUsed(7) == 1
                app.rawdata(7,:) = app.data(7,:);
                if app.TriggerState7 == 1
                    if  abs(max(app.rawdata(7,:))) > abs(min(app.rawdata(7,:)))
                        [pks7 locs7] =  findpeaks(app.rawdata(7,:), 'MinPeakHeight', 300);
                        app.StimTimes(7, 1:length(locs7)) = locs7;
                    else
                        [pks7 locs7] =  findpeaks(-app.rawdata(7,:), 'MinPeakHeight', 300);
                        app.StimTimes(7, 1:length(locs7)) = locs7;
                    end
                    for  i=1:length(locs7)
                        app.data(7,locs7(1,i)-(0.010/(1/app.sampfreq)):locs7(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end

            if app.ChannelsUsed(8)==  1
                app.rawdata(8,:) = app.data(8,:);
                if app.TriggerState8 == 1
                    if  abs(max(app.rawdata(8,:))) > abs(min(app.rawdata(8,:)))
                        [pks8 locs8] =  findpeaks(app.rawdata(8,:), 'MinPeakHeight', 300);
                        app.StimTimes(8, 1:length(locs8)) = locs8;
                    else
                        [pks8 locs8] =  findpeaks(-app.rawdata(8,:), 'MinPeakHeight', 300);
                        app.StimTimes(8, 1:length(locs8)) = locs8;
                    end
                    for  i=1:length(locs8)
                        app.data(8,locs8(1,i)-(0.010/(1/app.sampfreq)):locs8(1,i)+(0.010/(1/app.sampfreq))) = 0;
                    end
                end
            end
            FilterData(app)
        end

        function BurstFind(app)
            d = uiprogressdlg(app.SpinalModSensory, 'Title','Burst Analysis Running', 'Indeterminate','on');
            meanduration = [];
            stdduration = [];
            meandurationseconds = [];
            stddurationseconds = [];
            meanamplitude = [];
            stdamplitude = [];
            meanrectint = [];
            stdrectint = [];
            numbursts = [];
            numspikes = [];
            thresh = [];
            if  app.ChannelsUsed(1) == 1
                if app.BurstDetectionDropDown_1.Value == 49
                    thresh(1) =  5*rms(app.filtered(1,:));
                    app.ThresholdEditField_1.Value = thresh(1);
                elseif app.BurstDetectionDropDown_1.Value == 50
                    thresh(1) = 0.9*max(app.filtered(1,:));
                    app.ThresholdEditField_1.Value = thresh(1);
                elseif  app.BurstDetectionDropDown_1.Value == 51
                    thresh(1) = 0.7*max(app.filtered(1,:));
                    app.ThresholdEditField_1.Value = thresh(1);
                elseif app.BurstDetectionDropDown_1.Value == 52
                    thresh(1) = 0.5*max(app.filtered(1,:));
                    app.ThresholdEditField_1.Value = thresh(1);
                elseif app.BurstDetectionDropDown_1.Value == 53
                    thresh(1) = 0.3*max(app.filtered(1,:));
                    app.ThresholdEditField_1.Value = thresh(1);
                elseif  app.BurstDetectionDropDown_1.Value == 54
                    thresh(1) = mean(app.filtered(1,:));
                    app.ThresholdEditField_1.Value = thresh(1);
                elseif app.BurstDetectionDropDown_1.Value == 55
                    thresh(1) =  app.ThresholdEditField_1.Value;
                end
            end

            if  app.ChannelsUsed(2) == 1
                if app.BurstDetectionDropDown_2.Value == 49
                    thresh(2) =  5*rms(app.filtered(2,:));
                    app.ThresholdEditField_2.Value = thresh(2);
                elseif app.BurstDetectionDropDown_2.Value == 50
                    thresh(2) = 0.9*max(app.filtered(2,:));
                    app.ThresholdEditField_2.Value = thresh(2);
                elseif  app.BurstDetectionDropDown_2.Value == 51
                    thresh(2) = 0.7*max(app.filtered(2,:));
                    app.ThresholdEditField_2.Value = thresh(2);
                elseif app.BurstDetectionDropDown_2.Value == 52
                    thresh(2) = 0.5*max(app.filtered(2,:));
                    app.ThresholdEditField_2.Value = thresh(2);
                elseif app.BurstDetectionDropDown_2.Value == 53
                    thresh(2) = 0.3*max(app.filtered(2,:));
                    app.ThresholdEditField_2.Value = thresh(2);
                elseif  app.BurstDetectionDropDown_2.Value == 54
                    thresh(2) = mean(app.filtered(2,:));
                    app.ThresholdEditField_2.Value = thresh(2);
                elseif app.BurstDetectionDropDown_2.Value == 55
                    thresh(2) =  app.ThresholdEditField_2.Value;
                end
            end

            if  app.ChannelsUsed(3) ==1
                if app.BurstDetectionDropDown_3.Value == 49
                    thresh(3) =  5*rms(app.filtered(3,:));
                    app.ThresholdEditField_3.Value = thresh(3);
                elseif app.BurstDetectionDropDown_3.Value == 50
                    thresh(3) = 0.9*max(app.filtered(3,:));
                    app.ThresholdEditField_3.Value = thresh(3);
                elseif  app.BurstDetectionDropDown_3.Value == 51
                    thresh(3) = 0.7*max(app.filtered(3,:));
                    app.ThresholdEditField_3.Value = thresh(3);
                elseif app.BurstDetectionDropDown_3.Value == 52
                    thresh(3) = 0.5*max(app.filtered(3,:));
                    app.ThresholdEditField_3.Value = thresh(3);
                elseif app.BurstDetectionDropDown_3.Value == 53
                    thresh(3) = 0.3*max(app.filtered(3,:));
                    app.ThresholdEditField_3.Value = thresh(3);
                elseif  app.BurstDetectionDropDown_3.Value == 54
                    thresh(3) = mean(app.filtered(3,:));
                    app.ThresholdEditField_3.Value = thresh(3);
                elseif app.BurstDetectionDropDown_3.Value == 55
                    thresh(3) =  app.ThresholdEditField_3.Value;
                end
            end

            if  app.ChannelsUsed(4) ==1
                if app.BurstDetectionDropDown_4.Value == 49
                    thresh(4) =  5*rms(app.filtered(4,:));
                    app.ThresholdEditField_4.Value = thresh(4);
                elseif app.BurstDetectionDropDown_4.Value == 50
                    thresh(4) = 0.9*max(app.filtered(4,:));
                    app.ThresholdEditField_4.Value = thresh(4);
                elseif  app.BurstDetectionDropDown_4.Value == 51
                    thresh(4) = 0.7*max(app.filtered(4,:));
                    app.ThresholdEditField_4.Value = thresh(4);
                elseif app.BurstDetectionDropDown_4.Value == 52
                    thresh(4) = 0.5*max(app.filtered(4,:));
                    app.ThresholdEditField_4.Value = thresh(4);
                elseif app.BurstDetectionDropDown_4.Value == 53
                    thresh(4) = 0.4*max(app.filtered(4,:));
                    app.ThresholdEditField_4.Value = thresh(4);
                elseif  app.BurstDetectionDropDown_4.Value == 54
                    thresh(4) = mean(app.filtered(4,:));
                    app.ThresholdEditField_4.Value = thresh(4);
                elseif  app.BurstDetectionDropDown_4.Value == 55
                    thresh(4) =  app.ThresholdEditField_4.Value;
                end
            end

            if  app.ChannelsUsed(5) ==1
                if app.BurstDetectionDropDown_5.Value == 49
                    thresh(5) =  5*rms(app.filtered(5,:));
                    app.ThresholdEditField_5.Value = thresh(5);
                elseif app.BurstDetectionDropDown_5.Value == 50
                    thresh(5) = 0.9*max(app.filtered(5,:));
                    app.ThresholdEditField_5.Value = thresh(5);
                elseif  app.BurstDetectionDropDown_5.Value == 51
                    thresh(5) = 0.7*max(app.filtered(5,:));
                    app.ThresholdEditField_5.Value = thresh(5);
                elseif app.BurstDetectionDropDown_5.Value == 52
                    thresh(5) = 0.5*max(app.filtered(5,:));
                    app.ThresholdEditField_5.Value = thresh(5);
                elseif app.BurstDetectionDropDown_5.Value == 53
                    thresh(5) = 0.5*max(app.filtered(5,:));
                    app.ThresholdEditField_5.Value = thresh(5);
                elseif  app.BurstDetectionDropDown_5.Value == 54
                    thresh(5) = mean(app.filtered(5,:));
                    app.ThresholdEditField_5.Value = thresh(5);
                elseif app.BurstDetectionDropDown_5.Value == 55
                    thresh(5) =  app.ThresholdEditField_5.Value;
                end
            end

            if  app.ChannelsUsed(6) ==1
                if app.BurstDetectionDropDown_6.Value == 49
                    thresh(6) =  5*rms(app.filtered(6,:));
                    app.ThresholdEditField_6.Value = thresh(6);
                elseif app.BurstDetectionDropDown_6.Value == 50
                    thresh(6) = 0.9*max(app.filtered(6,:));
                    app.ThresholdEditField_6.Value = thresh(6);
                elseif  app.BurstDetectionDropDown_6.Value == 51
                    thresh(6) = 0.7*max(app.filtered(6,:));
                    app.ThresholdEditField_6.Value = thresh(6);
                elseif app.BurstDetectionDropDown_6.Value == 52
                    thresh(6) = 0.6*max(app.filtered(6,:));
                    app.ThresholdEditField_6.Value = thresh(6);
                elseif app.BurstDetectionDropDown_6.Value == 53
                    thresh(6) = 0.6*max(app.filtered(6,:));
                    app.ThresholdEditField_6.Value = thresh(6);
                elseif  app.BurstDetectionDropDown_6.Value == 54
                    thresh(6) = mean(app.filtered(6,:));
                    app.ThresholdEditField_6.Value = thresh(6);
                elseif  app.BurstDetectionDropDown_6.Value == 55
                    thresh(6) =  app.ThresholdEditField_6.Value;
                end
            end

            if  app.ChannelsUsed(7) ==1
                if app.BurstDetectionDropDown_7.Value == 49
                    thresh(7) =  5*rms(app.filtered(7,:));
                    app.ThresholdEditField_7.Value = thresh(7);
                elseif app.BurstDetectionDropDown_7.Value == 50
                    thresh(7) = 0.9*max(app.filtered(7,:));
                    app.ThresholdEditField_7.Value = thresh(7);
                elseif  app.BurstDetectionDropDown_7.Value == 51
                    thresh(7) = 0.7*max(app.filtered(7,:));
                    app.ThresholdEditField_7.Value = thresh(7);
                elseif app.BurstDetectionDropDown_7.Value == 52
                    thresh(7) = 0.7*max(app.filtered(7,:));
                    app.ThresholdEditField_7.Value = thresh(7);
                elseif app.BurstDetectionDropDown_7.Value == 53
                    thresh(7) = 0.7*max(app.filtered(7,:));
                    app.ThresholdEditField_7.Value = thresh(7);
                elseif  app.BurstDetectionDropDown_7.Value == 54
                    thresh(7) = mean(app.filtered(7,:));
                    app.ThresholdEditField_7.Value = thresh(7);
                elseif app.BurstDetectionDropDown_7.Value == 55
                    thresh(7) =  app.ThresholdEditField_7.Value;
                end
            end

            if  app.ChannelsUsed(8) ==1
                if app.BurstDetectionDropDown_8.Value == 49
                    thresh(8) =  5*rms(app.filtered(8,:));
                    app.ThresholdEditField_8.Value = thresh(8);
                elseif app.BurstDetectionDropDown_8.Value == 50
                    thresh(8) = 0.9*max(app.filtered(8,:));
                    app.ThresholdEditField_8.Value = thresh(8);
                elseif  app.BurstDetectionDropDown_8.Value == 51
                    thresh(8) = 0.8*max(app.filtered(8,:));
                    app.ThresholdEditField_8.Value = thresh(8);
                elseif app.BurstDetectionDropDown_8.Value == 52
                    thresh(8) = 0.8*max(app.filtered(8,:));
                    app.ThresholdEditField_8.Value = thresh(8);
                elseif app.BurstDetectionDropDown_8.Value == 53
                    thresh(8) = 0.8*max(app.filtered(8,:));
                    app.ThresholdEditField_8.Value = thresh(8);
                elseif  app.BurstDetectionDropDown_8.Value == 54
                    thresh(8) = mean(app.filtered(8,:));
                    app.ThresholdEditField_8.Value = thresh(8);
                elseif app.BurstDetectionDropDown_8.Value == 55
                    thresh(8) =  app.ThresholdEditField_8.Value;
                end
            end
            %Actual search and plot function for each channel
            %Channel 1
            maxpd = 500;
            ToFilter = find(app.ChannelsUsed > 0);
            if app.ChannelsUsed(1)==1
                d.Message =  "Channel 1 is being analyzed";
                threshZoom = 2*rms(app.filtered(1,:));
                app.bigpeaks1 = [];
                app.biglocs1 = [];
                firstbigpeaks1 = [];
                firstbiglocs1 = [];
                minpd1 = app.MinInterrbursttimemsEditField_1.Value * (app.sampfreq/1000);
                [firstbigpeaks1, firstbiglocs1] = findpeaks(app.filtered(1,:),'MinPeakHeight',thresh(1),'MinPeakDistance', minpd1);
                subpeaks1 = [];
                sublocs1 = [];
                correctedloc1 = [];
                app.firstloc1 = [];
                firstpeak1 = [];
                duration1  =[];
                duration_second1 = [];
                rectint1 = [];
                numpeaks1 = [];
                app.p1 =  [];
                app.f1 = [];
                for i =  1:length(firstbiglocs1)-1
                    if firstbiglocs1(i) < length(app.filtered(1,:)) - (maxpd + 1) & firstbiglocs1(i) > maxpd + 1
                        sample1 = firstbiglocs1(i);
                        [subpeaks1, sublocs1] = findpeaks(app.filtered(1,sample1-maxpd:sample1+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs1)
                            correctedloc1 = sample1 - maxpd + sublocs1;
                            startloc = min(correctedloc1);
                            firstpeak1(i) = subpeaks1(1);
                            endloc = max(correctedloc1);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_1.Value;
                            if holdcheck == 1
                                app.firstloc1(i) =  min(correctedloc1);
                                app.lastloc1(i) =  max(correctedloc1);
                                lastpeak1(i) = subpeaks1(end);
                                duration1(i) =  (app.lastloc1(i)-app.firstloc1(i));
                                duration_second1(i)  = duration1(i)/(app.sampfreq/1000);
                                backlength = app.lastloc1(i) - app.firstloc1(i);
                                backg = sum(app.filtered(1,app.lastloc1(i)+50:app.lastloc1(i)+50+backlength));
                                rectint1(i) =  sum(app.filtered(1,app.firstloc1(i):(app.lastloc1(i))))-backg;
                                firstpeak1(end+1) = firstpeak1(i);
                                [app.p1, app.f1] = pspectrum(app.data(app.firstloc1(i):app.lastloc1(i)), app.sampfreq);
                                app.bigpeaks1(i) = firstbigpeaks1(i);
                                app.biglocs1(i) = firstbiglocs1(i);
                            else
                                app.firstloc1(i) =  NaN;
                                app.lastloc1(i) =  NaN;
                                lastpeak1(i) = NaN;
                                duration1(i) =  NaN;
                                duration_second1(i)  = NaN;
                                rectint1(i) =  NaN;
                                firstpeak1(end+1) = NaN;
                                app.p1(i) = NaN;
                                app.f1(i) = NaN;
                                app.bigpeaks1(i) = NaN;
                                app.biglocs1(i) = NaN;
                            end
                        end
                    end
                    duration1 = duration1(~isnan(duration1));
                    duration_second1 = duration_second1(~isnan(duration_second1));
                    rectint1 = rectint1(~isnan(rectint1));
                    app.bigpeaks1 = app.bigpeaks1(~isnan(app.bigpeaks1));
                    app.biglocs1 = app.biglocs1(~isnan(app.biglocs1));
                    app.firstloc1 = app.firstloc1(~isnan(app.firstloc1));
                    app.lastloc1 = app.lastloc1(~isnan(app.lastloc1));
                    app.firstloc1 = app.firstloc1((app.firstloc1)>0);
                    meanduration(1) = mean(duration1);
                    stdduration(1) = std(duration1);
                    meandurationseconds(1) = mean(duration_second1);
                    stddurationseconds(1) = std(duration_second1);
                    meanamplitude(1) = mean(app.bigpeaks1);
                    stdamplitude(1) = std(app.bigpeaks1);
                    meanrectint(1) = mean(rectint1);
                    stdrectint(1) = std(rectint1);
                    numbursts(1) = length(app.biglocs1);
                    numspikes(1) = mean(length(subpeaks1));
                end
                if  isempty(app.bigpeaks1) == 1
                    numbursts(1) = 0;
                    duration1 = 0;
                    duration_second1 = 0;
                    rectint1 = 0;
                    app.bigpeaks1 = 0;
                    app.biglocs1 = 0;
                    app.firstloc1 = 0;
                    app.lastloc1 = 0;
                    app.firstloc1 = 0;
                    meanduration(1) = 0;
                    stdduration(1) = 0;
                    meandurationseconds(1) = 0;
                    stddurationseconds(1) = 0;
                    meanamplitude(1) = 0;
                    stdamplitude(1) = 0;
                    meanrectint(1) = 0;
                    stdrectint(1) = 0;
                    numbursts(1) = 0;
                    numspikes(1) = 0;
                end
            end

            %Channel 2
            if app.ChannelsUsed(2)==1
                d.Message =  "Channel 2 is being analyzed";
                threshZoom = 2*rms(app.filtered(2,:));
                app.bigpeaks2 = [];
                app.biglocs2 = [];
                firstbigpeaks2 = [];
                firstbiglocs2 = [];
                minpd2 = app.MininterbursttimemsEditField.Value * (app.sampfreq/1000);
                [firstbigpeaks2, firstbiglocs2] = findpeaks(app.filtered(2,:),'MinPeakHeight',thresh(2),'MinPeakDistance', minpd2);
                subpeaks2 = [];
                sublocs2 = [];
                correctedloc2 = [];
                app.firstloc2 = [];
                firstpeak2 = [];
                duration2  =[];
                duration_second2 = [];
                rectint2 = [];
                numpeaks2 = [];
                app.p2 =  [];
                app.f2 = [];
                for i =  1:length(firstbiglocs2)-1
                    if firstbiglocs2(i) < length(app.filtered(2,:)) - (maxpd + 1) & firstbiglocs2(i) > maxpd + 1
                        sample2 = firstbiglocs2(i);
                        [subpeaks2, sublocs2] = findpeaks(app.filtered(2,sample2-maxpd:sample2+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs2)
                            correctedloc2 = sample2 - maxpd + sublocs2;
                            startloc = min(correctedloc2);
                            firstpeak2(i) = subpeaks2(1);
                            endloc = max(correctedloc2);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_2.Value;
                            if holdcheck == 1
                                app.firstloc2(i) =  min(correctedloc2);
                                app.lastloc2(i) =  max(correctedloc2);
                                lastpeak2(i) = subpeaks2(end);
                                duration2(i) =  (app.lastloc2(i)-app.firstloc2(i));
                                duration_second2(i)  = duration2(i)/(app.sampfreq/1000);
                                backlength = app.lastloc2(i) - app.firstloc2(i);
                                backg = sum(app.filtered(2,app.lastloc2(i)+50:app.lastloc2(i)+50+backlength));
                                rectint2(i) =  sum(app.filtered(2,app.firstloc2(i):(app.lastloc2(i))))-backg;
                                firstpeak2(end+2) = firstpeak2(i);
                                [app.p2, app.f2] = pspectrum(app.data(app.firstloc2(i):app.lastloc2(i)), app.sampfreq);
                                app.bigpeaks2(i) = firstbigpeaks2(i);
                                app.biglocs2(i) = firstbiglocs2(i);
                            else
                                app.firstloc2(i) =  NaN;
                                app.lastloc2(i) =  NaN;
                                lastpeak2(i) = NaN;
                                duration2(i) =  NaN;
                                duration_second2(i)  = NaN;
                                rectint2(i) =  NaN;
                                firstpeak2(end+2) = NaN;
                                app.p2(i) = NaN;
                                app.f2(i) = NaN;
                                app.bigpeaks2(i) = NaN;
                                app.biglocs2(i) = NaN;
                            end
                        end
                    end
                    duration2 = duration2(~isnan(duration2));
                    duration_second2 = duration_second2(~isnan(duration_second2));
                    rectint2 = rectint2(~isnan(rectint2));
                    app.bigpeaks2 = app.bigpeaks2(~isnan(app.bigpeaks2));
                    app.biglocs2 = app.biglocs2(~isnan(app.biglocs2));
                    app.firstloc2 = app.firstloc2(~isnan(app.firstloc2));
                    app.firstloc2 = app.firstloc2((app.firstloc2)>0);
                    app.lastloc2 = app.lastloc2(~isnan(app.lastloc2));
                    meanduration(2) = mean(duration2);
                    stdduration(2) = std(duration2);
                    meandurationseconds(2) = mean(duration_second2);
                    stddurationseconds(2) = std(duration_second2);
                    meanamplitude(2) = mean(app.bigpeaks2);
                    stdamplitude(2) = std(app.bigpeaks2);
                    meanrectint(2) = mean(rectint2);
                    stdrectint(2) = std(rectint2);
                    numbursts(2) = length(app.biglocs2);
                    numspikes(2) = mean(length(subpeaks2));
                end
                if  isempty(app.bigpeaks2) == 1
                    numbursts(2) = 0;
                    duration2 = 0;
                    duration_second2 = 0;
                    rectint2 = 0;
                    app.bigpeaks2 = 0;
                    app.biglocs2 = 0;
                    app.firstloc2 = 0;
                    app.lastloc2 = 0;
                    app.firstloc2 = 0;
                    meanduration(2) = 0;
                    stdduration(2) = 0;
                    meandurationseconds(2) = 0;
                    stddurationseconds(2) = 0;
                    meanamplitude(2) = 0;
                    stdamplitude(2) = 0;
                    meanrectint(2) = 0;
                    stdrectint(2) = 0;
                    numbursts(2) = 0;
                    numspikes(2) = 0;
                end
            end

            %Channel 3
            if app.ChannelsUsed(3)==1
                d.Message =  "Channel 3 is being analyzed";
                threshZoom = 2*rms(app.filtered(3,:));
                app.bigpeaks3 = [];
                app.biglocs3 = [];
                firstbigpeaks3 = [];
                firstbiglocs3 = [];
                minpd3 = app.MininterbursttimemsEditField.Value * (app.sampfreq/1000);
                [firstbigpeaks3, firstbiglocs3] = findpeaks(app.filtered(3,:),'MinPeakHeight',thresh(3),'MinPeakDistance', minpd3);
                subpeaks3 = [];
                sublocs3 = [];
                correctedloc3 = [];
                app.firstloc3 = [];
                firstpeak3 = [];
                duration3  =[];
                duration_second3 = [];
                rectint3 = [];
                numpeaks3 = [];
                app.p3 =  [];
                app.f3 = [];
                for i =  1:length(firstbiglocs3)-1
                    if firstbiglocs3(i) < length(app.filtered(3,:)) - (maxpd + 1) & firstbiglocs3(i) > maxpd + 1
                        sample3 = firstbiglocs3(i);
                        [subpeaks3, sublocs3] = findpeaks(app.filtered(3,sample3-maxpd:sample3+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs3)
                            correctedloc3 = sample3 - maxpd + sublocs3;
                            startloc = min(correctedloc3);
                            firstpeak3(i) = subpeaks3(1);
                            endloc = max(correctedloc3);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_3.Value;
                            if holdcheck == 1
                                app.firstloc3(i) =  min(correctedloc3);
                                app.lastloc3(i) =  max(correctedloc3);
                                lastpeak3(i) = subpeaks3(end);
                                duration3(i) =  (app.lastloc3(i)-app.firstloc3(i));
                                duration_second3(i)  = duration3(i)/(app.sampfreq/1000);
                                backlength = app.lastloc3(i) - app.firstloc3(i);
                                backg = sum(app.filtered(3,app.lastloc3(i)+50:app.lastloc3(i)+50+backlength));
                                rectint3(i) =  sum(app.filtered(3,app.firstloc3(i):(app.lastloc3(i))))-backg;
                                firstpeak3(end+3) = firstpeak3(i);
                                [app.p3, app.f3] = pspectrum(app.data(app.firstloc3(i):app.lastloc3(i)), app.sampfreq);
                                app.bigpeaks3(i) = firstbigpeaks3(i);
                                app.biglocs3(i) = firstbiglocs3(i);
                            else
                                app.firstloc3(i) =  NaN;
                                app.lastloc3(i) =  NaN;
                                lastpeak3(i) = NaN;
                                duration3(i) =  NaN;
                                duration_second3(i)  = NaN;
                                rectint3(i) =  NaN;
                                firstpeak3(end+3) = NaN;
                                app.p3(i) = NaN;
                                app.f3(i) = NaN;
                                app.bigpeaks3(i) = NaN;
                                app.biglocs3(i) = NaN;
                            end
                        end
                    end
                    duration3 = duration3(~isnan(duration3));
                    duration_second3 = duration_second3(~isnan(duration_second3));
                    rectint3 = rectint3(~isnan(rectint3));
                    app.bigpeaks3 = app.bigpeaks3(~isnan(app.bigpeaks3));
                    app.biglocs3 = app.biglocs3(~isnan(app.biglocs3));
                    app.firstloc3 = app.firstloc3(~isnan(app.firstloc3));
                    app.firstloc3 = app.firstloc3((app.firstloc3)>0);
                    app.lastloc3 = app.lastloc3(~isnan(app.lastloc3));
                    meanduration(3) = mean(duration3);
                    stdduration(3) = std(duration3);
                    meandurationseconds(3) = mean(duration_second3);
                    stddurationseconds(3) = std(duration_second3);
                    meanamplitude(3) = mean(app.bigpeaks3);
                    stdamplitude(3) = std(app.bigpeaks3);
                    meanrectint(3) = mean(rectint3);
                    stdrectint(3) = std(rectint3);
                    numbursts(3) = length(app.biglocs3);
                    numspikes(3) = mean(length(subpeaks3));
                end
                if  isempty(app.bigpeaks3) == 1
                    numbursts(3) = 0;
                    duration3 = 0;
                    duration_second3 = 0;
                    rectint3 = 0;
                    app.bigpeaks3 = 0;
                    app.biglocs3 = 0;
                    app.firstloc3 = 0;
                    app.lastloc3 = 0;
                    app.firstloc3 = 0;
                    meanduration(3) = 0;
                    stdduration(3) = 0;
                    meandurationseconds(3) = 0;
                    stddurationseconds(3) = 0;
                    meanamplitude(3) = 0;
                    stdamplitude(3) = 0;
                    meanrectint(3) = 0;
                    stdrectint(3) = 0;
                    numbursts(3) = 0;
                    numspikes(3) = 0;
                end
            end
            %Channel 4
            if app.ChannelsUsed(4)==1
                d.Message =  "Channel 4 is being analyzed";
                threshZoom = 2*rms(app.filtered(4,:));
                app.bigpeaks4 = [];
                app.biglocs4 = [];
                firstbigpeaks4 = [];
                firstbiglocs4 = [];
                minpd4 = app.MininterbursttimemsEditField.Value * (app.sampfreq/1000);
                [firstbigpeaks4, firstbiglocs4] = findpeaks(app.filtered(4,:),'MinPeakHeight',thresh(4),'MinPeakDistance', minpd4);
                subpeaks4 = [];
                sublocs4 = [];
                correctedloc4 = [];
                app.firstloc4 = [];
                firstpeak4 = [];
                duration4  =[];
                duration_second4 = [];
                rectint4 = [];
                numpeaks4 = [];
                app.p4 =  [];
                app.f4 = [];
                for i =  1:length(firstbiglocs4)-1
                    if firstbiglocs4(i) < length(app.filtered(4,:)) - (maxpd + 1) & firstbiglocs4(i) > maxpd + 1
                        sample4 = firstbiglocs4(i);
                        [subpeaks4, sublocs4] = findpeaks(app.filtered(4,sample4-maxpd:sample4+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs4)
                            correctedloc4 = sample4 - maxpd + sublocs4;
                            startloc = min(correctedloc4);
                            firstpeak4(i) = subpeaks4(1);
                            endloc = max(correctedloc4);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_4.Value;
                            if holdcheck == 1
                                app.firstloc4(i) =  min(correctedloc4);
                                app.lastloc4(i) =  max(correctedloc4);
                                lastpeak4(i) = subpeaks4(end);
                                duration4(i) =  (app.lastloc4(i)-app.firstloc4(i));
                                duration_second4(i)  = duration4(i)/(app.sampfreq/1000);
                                backlength = app.lastloc4(i) - app.firstloc4(i);
                                backg = sum(app.filtered(4,app.lastloc4(i)+50:app.lastloc4(i)+50+backlength));
                                rectint4(i) =  sum(app.filtered(4,app.firstloc4(i):(app.lastloc4(i))))-backg;
                                firstpeak4(end+4) = firstpeak4(i);
                                [app.p4, app.f4] = pspectrum(app.data(app.firstloc4(i):app.lastloc4(i)), app.sampfreq);
                                app.bigpeaks4(i) = firstbigpeaks4(i);
                                app.biglocs4(i) = firstbiglocs4(i);
                            else
                                app.firstloc4(i) =  NaN;
                                app.lastloc4(i) =  NaN;
                                lastpeak4(i) = NaN;
                                duration4(i) =  NaN;
                                duration_second4(i)  = NaN;
                                rectint4(i) =  NaN;
                                firstpeak4(end+4) = NaN;
                                app.p4(i) = NaN;
                                app.f4(i) = NaN;
                                app.bigpeaks4(i) = NaN;
                                app.biglocs4(i) = NaN;
                            end
                        end
                    end
                    duration4 = duration4(~isnan(duration4));
                    duration_second4 = duration_second4(~isnan(duration_second4));
                    rectint4 = rectint4(~isnan(rectint4));
                    app.bigpeaks4 = app.bigpeaks4(~isnan(app.bigpeaks4));
                    app.biglocs4 = app.biglocs4(~isnan(app.biglocs4));
                    app.firstloc4 = app.firstloc4(~isnan(app.firstloc4));
                    app.firstloc4 = app.firstloc4((app.firstloc4)>1);
                    app.lastloc4 = app.lastloc4(~isnan(app.lastloc4));
                    meanduration(4) = mean(duration4);
                    stdduration(4) = std(duration4);
                    meandurationseconds(4) = mean(duration_second4);
                    stddurationseconds(4) = std(duration_second4);
                    meanamplitude(4) = mean(app.bigpeaks4);
                    stdamplitude(4) = std(app.bigpeaks4);
                    meanrectint(4) = mean(rectint4);
                    stdrectint(4) = std(rectint4);
                    numbursts(4) = length(app.biglocs4);
                    numspikes(4) = mean(length(subpeaks4));
                end
                if  isempty(app.bigpeaks4) == 1
                    numbursts(4) = 0;
                    duration4 = 0;
                    duration_second4 = 0;
                    rectint4 = 0;
                    app.bigpeaks4 = 0;
                    app.biglocs4 = 0;
                    app.firstloc4 = 0;
                    app.lastloc4 = 0;
                    app.firstloc4 = 0;
                    meanduration(4) = 0;
                    stdduration(4) = 0;
                    meandurationseconds(4) = 0;
                    stddurationseconds(4) = 0;
                    meanamplitude(4) = 0;
                    stdamplitude(4) = 0;
                    meanrectint(4) = 0;
                    stdrectint(4) = 0;
                    numbursts(4) = 0;
                    numspikes(4) = 0;
                end
            end

            %Channel 5
            if app.ChannelsUsed(5)==1
                d.Message =  "Channel 5 is being analyzed";
                threshZoom = 2*rms(app.filtered(5,:));
                app.bigpeaks5 = [];
                app.biglocs5 = [];
                firstbigpeaks5 = [];
                firstbiglocs5 = [];
                minpd5 = app.MininterbursttimemsEditField.Value * (app.sampfreq/1000);
                [firstbigpeaks5, firstbiglocs5] = findpeaks(app.filtered(5,:),'MinPeakHeight',thresh(5),'MinPeakDistance', minpd5);
                subpeaks5 = [];
                sublocs5 = [];
                correctedloc5 = [];
                app.firstloc5 = [];
                firstpeak5 = [];
                duration5  =[];
                duration_second5 = [];
                rectint5 = [];
                numpeaks5 = [];
                app.p5 =  [];
                app.f5 = [];
                for i =  1:length(firstbiglocs5)-1
                    if firstbiglocs5(i) < length(app.filtered(5,:)) - (maxpd + 1) & firstbiglocs5(i) > maxpd + 1
                        sample5 = firstbiglocs5(i);
                        [subpeaks5, sublocs5] = findpeaks(app.filtered(5,sample5-maxpd:sample5+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs5)
                            correctedloc5 = sample5 - maxpd + sublocs5;
                            startloc = min(correctedloc5);
                            firstpeak5(i) = subpeaks5(1);
                            endloc = max(correctedloc5);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_5.Value;
                            if holdcheck == 1
                                app.firstloc5(i) =  min(correctedloc5);
                                app.lastloc5(i) =  max(correctedloc5);
                                lastpeak5(i) = subpeaks5(end);
                                duration5(i) =  (app.lastloc5(i)-app.firstloc5(i));
                                duration_second5(i)  = duration5(i)/(app.sampfreq/1000);
                                backlength = app.lastloc5(i) - app.firstloc5(i);
                                backg = sum(app.filtered(5,app.lastloc5(i)+50:app.lastloc5(i)+50+backlength));
                                rectint5(i) =  sum(app.filtered(5,app.firstloc5(i):(app.lastloc5(i))))-backg;
                                firstpeak5(end+5) = firstpeak5(i);
                                [app.p5, app.f5] = pspectrum(app.data(app.firstloc5(i):app.lastloc5(i)), app.sampfreq);
                                app.bigpeaks5(i) = firstbigpeaks5(i);
                                app.biglocs5(i) = firstbiglocs5(i);
                            else
                                app.firstloc5(i) =  NaN;
                                app.lastloc5(i) =  NaN;
                                lastpeak5(i) = NaN;
                                duration5(i) =  NaN;
                                duration_second5(i)  = NaN;
                                rectint5(i) =  NaN;
                                firstpeak5(end+5) = NaN;
                                app.p5(i) = NaN;
                                app.f5(i) = NaN;
                                app.bigpeaks5(i) = NaN;
                                app.biglocs5(i) = NaN;
                            end
                        end
                    end
                    duration5 = duration5(~isnan(duration5));
                    duration_second5 = duration_second5(~isnan(duration_second5));
                    rectint5 = rectint5(~isnan(rectint5));
                    app.bigpeaks5 = app.bigpeaks5(~isnan(app.bigpeaks5));
                    app.biglocs5 = app.biglocs5(~isnan(app.biglocs5));
                    app.firstloc5 = app.firstloc5(~isnan(app.firstloc5));
                    app.firstloc5 = app.firstloc5((app.firstloc5)>0);
                    app.lastloc5 = app.lastloc5(~isnan(app.lastloc5));
                    meanduration(5) = mean(duration5);
                    stdduration(5) = std(duration5);
                    meandurationseconds(5) = mean(duration_second5);
                    stddurationseconds(5) = std(duration_second5);
                    meanamplitude(5) = mean(app.bigpeaks5);
                    stdamplitude(5) = std(app.bigpeaks5);
                    meanrectint(5) = mean(rectint5);
                    stdrectint(5) = std(rectint5);
                    numbursts(5) = length(app.biglocs5);;
                    numspikes(5) = mean(length(subpeaks5));
                end
                if  isempty(app.biglocs5) == 1
                    numbursts(5) = 0;
                    duration5 = 0;
                    duration_second5 = 0;
                    rectint5 = 0;
                    app.bigpeaks5 = 0;
                    app.biglocs5 = 0;
                    app.firstloc5 = 0;
                    app.lastloc5 = 0;
                    app.firstloc5 = 0;
                    meanduration(5) = 0;
                    stdduration(5) = 0;
                    meandurationseconds(5) = 0;
                    stddurationseconds(5) = 0;
                    meanamplitude(5) = 0;
                    stdamplitude(5) = 0;
                    meanrectint(5) = 0;
                    stdrectint(5) = 0;
                    numbursts(5) = 0;
                    numspikes(5) = 0;
                end
            end

            %Channel 6
            if app.ChannelsUsed(6)==1
                d.Message =  "Channel 6 is being analyzed";
                threshZoom = 2*rms(app.filtered(6,:));
                app.bigpeaks6 = [];
                app.biglocs6 = [];
                firstbigpeaks6 = [];
                firstbiglocs6 = [];
                minpd6 = app.MininterbursttimemsEditField.Value * (app.sampfreq/1000);
                [firstbigpeaks6, firstbiglocs6] = findpeaks(app.filtered(6,:),'MinPeakHeight',thresh(6),'MinPeakDistance', minpd6);
                subpeaks6 = [];
                sublocs6 = [];
                correctedloc6 = [];
                app.firstloc6 = [];
                firstpeak6 = [];
                duration6  =[];
                duration_second6 = [];
                rectint6 = [];
                numpeaks6 = [];
                app.p6 =  [];
                app.f6 = [];
                for i =  1:length(firstbiglocs6)-1
                    if firstbiglocs6(i) < length(app.filtered(6,:)) - (maxpd + 1) & firstbiglocs6(i) > maxpd + 1
                        sample6 = firstbiglocs6(i);
                        [subpeaks6, sublocs6] = findpeaks(app.filtered(6,sample6-maxpd:sample6+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs6)
                            correctedloc6 = sample6 - maxpd + sublocs6;
                            startloc = min(correctedloc6);
                            firstpeak6(i) = subpeaks6(1);
                            endloc = max(correctedloc6);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_6.Value;
                            if holdcheck == 1
                                app.firstloc6(i) =  min(correctedloc6);
                                app.lastloc6(i) =  max(correctedloc6);
                                lastpeak6(i) = subpeaks6(end);
                                duration6(i) =  (app.lastloc6(i)-app.firstloc6(i));
                                duration_second6(i)  = duration6(i)/(app.sampfreq/1000);
                                backlength = app.lastloc6(i) - app.firstloc6(i);
                                backg = sum(app.filtered(6,app.lastloc6(i)+50:app.lastloc6(i)+50+backlength));
                                rectint6(i) =  sum(app.filtered(6,app.firstloc6(i):(app.lastloc6(i))))-backg;
                                firstpeak6(end+6) = firstpeak6(i);
                                [app.p6, app.f6] = pspectrum(app.data(app.firstloc6(i):app.lastloc6(i)), app.sampfreq);
                                app.bigpeaks6(i) = firstbigpeaks6(i);
                                app.biglocs6(i) = firstbiglocs6(i);
                            else
                                app.firstloc6(i) =  NaN;
                                app.lastloc6(i) =  NaN;
                                lastpeak6(i) = NaN;
                                duration6(i) =  NaN;
                                duration_second6(i)  = NaN;
                                rectint6(i) =  NaN;
                                firstpeak6(end+6) = NaN;
                                app.p6(i) = NaN;
                                app.f6(i) = NaN;
                                app.bigpeaks6(i) = NaN;
                                app.biglocs6(i) = NaN;
                            end
                        end
                    end
                    duration6 = duration6(~isnan(duration6));
                    duration_second6 = duration_second6(~isnan(duration_second6));
                    rectint6 = rectint6(~isnan(rectint6));
                    app.bigpeaks6 = app.bigpeaks6(~isnan(app.bigpeaks6));
                    app.biglocs6 = app.biglocs6(~isnan(app.biglocs6));
                    app.firstloc6 = app.firstloc6(~isnan(app.firstloc6));
                    app.firstloc6 = app.firstloc6((app.firstloc6)>0);
                    app.lastloc6 = app.lastloc6(~isnan(app.lastloc6));
                    meanduration(6) = mean(duration6);
                    stdduration(6) = std(duration6);
                    meandurationseconds(6) = mean(duration_second6);
                    stddurationseconds(6) = std(duration_second6);
                    meanamplitude(6) = mean(app.bigpeaks6);
                    stdamplitude(6) = std(app.bigpeaks6);
                    meanrectint(6) = mean(rectint6);
                    stdrectint(6) = std(rectint6);
                    numbursts(6) = length(app.biglocs6);;
                    numspikes(6) = mean(length(subpeaks6));
                end
                if  isempty(app.biglocs6) == 1
                    numbursts(6) = 0;
                    duration6 = 0;
                    duration_second6 = 0;
                    rectint6 = 0;
                    app.bigpeaks6 = 0;
                    app.biglocs6 = 0;
                    app.firstloc6 = 0;
                    app.lastloc6 = 0;
                    app.firstloc6 = 0;
                    meanduration(6) = 0;
                    stdduration(6) = 0;
                    meandurationseconds(6) = 0;
                    stddurationseconds(6) = 0;
                    meanamplitude(6) = 0;
                    stdamplitude(6) = 0;
                    meanrectint(6) = 0;
                    stdrectint(6) = 0;
                    numbursts(6) = 0;
                    numspikes(6) = 0;
                end
            end

            %Channel 7
            if app.ChannelsUsed(7)==1
                d.Message =  "Channel 7 is being analyzed";
                threshZoom = 2*rms(app.filtered(7,:));
                app.bigpeaks7 = [];
                app.biglocs7 = [];
                firstbigpeaks7 = [];
                firstbiglocs7 = [];
                minpd7 = app.MininterbursttimemsEditField.Value * (app.sampfreq/1000);
                [firstbigpeaks7, firstbiglocs7] = findpeaks(app.filtered(7,:),'MinPeakHeight',thresh(7),'MinPeakDistance', minpd7);
                subpeaks7 = [];
                sublocs7 = [];
                correctedloc7 = [];
                app.firstloc7 = [];
                firstpeak7 = [];
                duration7  =[];
                duration_second7 = [];
                rectint7 = [];
                numpeaks7 = [];
                app.p7 =  [];
                app.f7 = [];
                for i =  1:length(firstbiglocs7)-1
                    if firstbiglocs7(i) < length(app.filtered(7,:)) - (maxpd + 1) & firstbiglocs7(i) > maxpd + 1
                        sample7 = firstbiglocs7(i);
                        [subpeaks7, sublocs7] = findpeaks(app.filtered(7,sample7-maxpd:sample7+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs7)
                            correctedloc7 = sample7 - maxpd + sublocs7;
                            startloc = min(correctedloc7);
                            firstpeak7(i) = subpeaks7(1);
                            endloc = max(correctedloc7);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_7.Value;
                            if holdcheck == 1
                                app.firstloc7(i) =  min(correctedloc7);
                                app.lastloc7(i) =  max(correctedloc7);
                                lastpeak7(i) = subpeaks7(end);
                                duration7(i) =  (app.lastloc7(i)-app.firstloc7(i));
                                duration_second7(i)  = duration7(i)/(app.sampfreq/1000);
                                backlength = app.lastloc7(i) - app.firstloc7(i);
                                backg = sum(app.filtered(7,app.lastloc7(i)+50:app.lastloc7(i)+50+backlength));
                                rectint7(i) =  sum(app.filtered(7,app.firstloc7(i):(app.lastloc7(i))))-backg;
                                firstpeak7(end+7) = firstpeak7(i);
                                [app.p7, app.f7] = pspectrum(app.data(app.firstloc7(i):app.lastloc7(i)), app.sampfreq);
                                app.bigpeaks7(i) = firstbigpeaks7(i);
                                app.biglocs7(i) = firstbiglocs7(i);
                            else
                                app.firstloc7(i) =  NaN;
                                app.lastloc7(i) =  NaN;
                                lastpeak7(i) = NaN;
                                duration7(i) =  NaN;
                                duration_second7(i)  = NaN;
                                rectint7(i) =  NaN;
                                firstpeak7(end+7) = NaN;
                                app.p7(i) = NaN;
                                app.f7(i) = NaN;
                                app.bigpeaks7(i) = NaN;
                                app.biglocs7(i) = NaN;
                            end
                        end
                    end
                    duration7 = duration7(~isnan(duration7));
                    duration_second7 = duration_second7(~isnan(duration_second7));
                    rectint7 = rectint7(~isnan(rectint7));
                    app.bigpeaks7 = app.bigpeaks7(~isnan(app.bigpeaks7));
                    app.biglocs7 = app.biglocs7(~isnan(app.biglocs7));
                    app.firstloc7 = app.firstloc7(~isnan(app.firstloc7));
                    app.firstloc7 = app.firstloc7((app.firstloc7)>0);
                    app.lastloc7 = app.lastloc7(~isnan(app.lastloc7));
                    meanduration(7) = mean(duration7);
                    stdduration(7) = std(duration7);
                    meandurationseconds(7) = mean(duration_second7);
                    stddurationseconds(7) = std(duration_second7);
                    meanamplitude(7) = mean(app.bigpeaks7);
                    stdamplitude(7) = std(app.bigpeaks7);
                    meanrectint(7) = mean(rectint7);
                    stdrectint(7) = std(rectint7);
                    numbursts(7) = length(app.biglocs7);;
                    numspikes(7) = mean(length(subpeaks7));
                end
                if  isempty(app.biglocs7) == 1
                    numbursts(7) = 0;
                    duration7 = 0;
                    duration_second7 = 0;
                    rectint7 = 0;
                    app.bigpeaks7 = 0;
                    app.biglocs7 = 0;
                    app.firstloc7 = 0;
                    app.lastloc7 = 0;
                    app.firstloc7 = 0;
                    meanduration(7) = 0;
                    stdduration(7) = 0;
                    meandurationseconds(7) = 0;
                    stddurationseconds(7) = 0;
                    meanamplitude(7) = 0;
                    stdamplitude(7) = 0;
                    meanrectint(7) = 0;
                    stdrectint(7) = 0;
                    numbursts(7) = 0;
                    numspikes(7) = 0;
                end
            end
            %Channel 8
            if app.ChannelsUsed(8)==1
                d.Message =  "Channel 8 is being analyzed";
                threshZoom = 2*rms(app.filtered(8,:));
                app.bigpeaks8 = [];
                app.biglocs8 = [];
                firstbigpeaks8 = [];
                firstbiglocs8 = [];
                minpd8 = app.MininterbursttimemsEditField.Value * (app.sampfreq/1000);
                [firstbigpeaks8, firstbiglocs8] = findpeaks(app.filtered(8,:),'MinPeakHeight',thresh(8),'MinPeakDistance', minpd8);
                subpeaks8 = [];
                sublocs8 = [];
                correctedloc8 = [];
                app.firstloc8 = [];
                firstpeak8 = [];
                duration8  =[];
                duration_second8 = [];
                rectint8 = [];
                numpeaks8 = [];
                app.p8 =  [];
                app.f8 = [];
                for i =  1:length(firstbiglocs8)-1
                    if firstbiglocs8(i) < length(app.filtered(8,:)) - (maxpd + 1) & firstbiglocs8(i) > maxpd + 1
                        sample8 = firstbiglocs8(i);
                        [subpeaks8, sublocs8] = findpeaks(app.filtered(8,sample8-maxpd:sample8+maxpd), 'MinPeakHeight', threshZoom);
                        if ~isempty(sublocs8)
                            correctedloc8 = sample8 - maxpd + sublocs8;
                            startloc = min(correctedloc8);
                            firstpeak8(i) = subpeaks8(1);
                            endloc = max(correctedloc8);
                            durcheck =  (endloc-startloc)/(app.sampfreq/1000);
                            holdcheck = durcheck>app.MinburstdurationmsEditField_8.Value;
                            if holdcheck == 1
                                app.firstloc8(i) =  min(correctedloc8);
                                app.lastloc8(i) =  max(correctedloc8);
                                lastpeak8(i) = subpeaks8(end);
                                duration8(i) =  (app.lastloc8(i)-app.firstloc8(i));
                                duration_second8(i)  = duration8(i)/(app.sampfreq/1000);
                                backlength = app.lastloc8(i) - app.firstloc8(i);
                                backg = sum(app.filtered(8,app.lastloc8(i)+50:app.lastloc8(i)+50+backlength));
                                rectint8(i) =  sum(app.filtered(8,app.firstloc8(i):(app.lastloc8(i))))-backg;
                                firstpeak8(end+8) = firstpeak8(i);
                                [app.p8, app.f8] = pspectrum(app.data(app.firstloc8(i):app.lastloc8(i)), app.sampfreq);
                                app.bigpeaks8(i) = firstbigpeaks8(i);
                                app.biglocs8(i) = firstbiglocs8(i);
                            else
                                app.firstloc8(i) =  NaN;
                                app.lastloc8(i) =  NaN;
                                lastpeak8(i) = NaN;
                                duration8(i) =  NaN;
                                duration_second8(i)  = NaN;
                                rectint8(i) =  NaN;
                                firstpeak8(end+8) = NaN;
                                app.p8(i) = NaN;
                                app.f8(i) = NaN;
                                app.bigpeaks8(i) = NaN;
                                app.biglocs8(i) = NaN;
                            end
                        end
                    end
                    duration8 = duration8(~isnan(duration8));
                    duration_second8 = duration_second8(~isnan(duration_second8));
                    rectint8 = rectint8(~isnan(rectint8));
                    app.bigpeaks8 = app.bigpeaks8(~isnan(app.bigpeaks8));
                    app.biglocs8 = app.biglocs8(~isnan(app.biglocs8));
                    app.firstloc8 = app.firstloc8(~isnan(app.firstloc8));
                    app.firstloc8 = app.firstloc8((app.firstloc8)>0);
                    app.lastloc8 = app.lastloc8(~isnan(app.lastloc8));
                    meanduration(8) = mean(duration8);
                    stdduration(8) = std(duration8);
                    meandurationseconds(8) = mean(duration_second8);
                    stddurationseconds(8) = std(duration_second8);
                    meanamplitude(8) = mean(app.bigpeaks8);
                    stdamplitude(8) = std(app.bigpeaks8);
                    meanrectint(8) = mean(rectint8);
                    stdrectint(8) = std(rectint8);
                    numbursts(8) = length(app.biglocs8);;
                    numspikes(8) = mean(length(subpeaks8));
                end
                if  isempty(app.biglocs8) == 1
                    numbursts(8) = 0;
                    duration8 = 0;
                    duration_second8 = 0;
                    rectint8 = 0;
                    app.bigpeaks8 = 0;
                    app.biglocs8 = 0;
                    app.firstloc8 = 0;
                    app.lastloc8 = 0;
                    app.firstloc8 = 0;
                    meanduration(8) = 0;
                    stdduration(8) = 0;
                    meandurationseconds(8) = 0;
                    stddurationseconds(8) = 0;
                    meanamplitude(8) = 0;
                    stdamplitude(8) = 0;
                    meanrectint(8) = 0;
                    stdrectint(8) = 0;
                    numbursts(8) = 0;
                    numspikes(8) = 0;
                end
            end

            %Calculate spontaneous and post-stimulation bursting frequency
            stimthresh(1) = app.StimEditField_1.Value;
            stimthresh(2) = app.StimEditField_2.Value;
            stimthresh(3) = app.StimEditField_3.Value;
            stimthresh(4) = app.StimEditField_4.Value;
            stimthresh(5) = app.StimEditField_5.Value;
            stimthresh(6) = app.StimEditField_6.Value;
            stimthresh(7) = app.StimEditField_7.Value;
            stimthresh(8) = app.StimEditField_8.Value;
            for i=1:length(ToFilter)
                if app.StimSwitch.Value == 1
                    StimFreq = [];
                    SpontFreq = [];
                    %For each channel, identify stimulation time + x
                    %seconds
                    %as a time bin for post-stimulation activity
                    StimBursts1 = [];
                    SpontBursts1 = [];
                    StimMatch1 =  [];
                    SpontMatch1 = [];
                    pks1 = [];
                    locs1 = [];
                    if  app.ChannelsUsed(1) == 1
                        FullStim1 =[];
                        if app.TriggerState1 == 1
                            StimTimes1 = app.StimTimes(1,~isnan(app.StimTimes(1,:)));
                        else
                            [pks1, locs1] =  findpeaks(app.filtered(1,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes1 = locs1;
                        end

                        for q = 1:length(StimTimes1)
                            holdthing1(q,:) = StimTimes1(1,q):StimTimes1(1,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing1 = holdthing1';
                            FullStim1 = holderthing1(:)';
                        end
                        StimBursts1 = length(find(ismember(app.biglocs1, FullStim1) == 1));
                        SpontBursts1 = length(find(ismember(app.biglocs1, FullStim1) == 0))
                        SpontFreq(1) = app.sampfreq*SpontBursts1/abs(((length(app.data(1,:))-length(FullStim1))));
                        StimFreq(1) = app.sampfreq*StimBursts1/(length(FullStim1));
                    end
                    if  app.ChannelsUsed(2) == 1
                        FullStim2 =[];
                        if app.TriggerState1 == 1
                            StimTimes2 = app.StimTimes(2,~isnan(app.StimTimes(2,:)));
                        else
                            [pks2, locs2] =  findpeaks(app.filtered(2,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes2 = locs2;
                        end

                        for q = 1:length(StimTimes2)
                            holdthing2(q,:) = StimTimes2(1,q):StimTimes2(1,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing2 = holdthing2';
                            FullStim2 = holderthing2(:)';
                        end
                        StimBursts2 = length(find(ismember(app.biglocs2, FullStim2) == 1));
                        SpontBursts2 = length(find(ismember(app.biglocs2, FullStim2) == 0));
                        SpontFreq(2) = app.sampfreq*SpontBursts2/abs(((length(app.data(2,:))-length(FullStim2))));
                        StimFreq(2) = app.sampfreq*StimBursts2/(length(FullStim2));
                    end
                    if  app.ChannelsUsed(3) == 1
                        FullStim3 =[];
                        if app.TriggerState1 == 1
                            StimTimes3 = app.StimTimes(3,~isnan(app.StimTimes(3,:)));
                        else
                            [pks3, locs3] =  findpeaks(app.filtered(3,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes3 = locs3;
                        end

                        for q = 1:length(StimTimes3)
                            holdthing3(q,:) = StimTimes3(1,q):StimTimes3(1,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing3 = holdthing3';
                            FullStim3 = holderthing3(:)';
                        end
                        StimBursts3 = length(find(ismember(app.biglocs3, FullStim3) == 1));
                        SpontBursts3 = length(find(ismember(app.biglocs3, FullStim3) == 0));
                        SpontFreq(3) = app.sampfreq*SpontBursts3/abs(((length(app.data(3,:))-length(FullStim3))));
                        StimFreq(3) = app.sampfreq*StimBursts3/(length(FullStim3));
                    end
                    if  app.ChannelsUsed(4) == 1
                        FullStim4 =[];
                        if app.TriggerState1 == 1
                            StimTimes4 = app.StimTimes(4,~isnan(app.StimTimes(4,:)));
                        else
                            [pks4, locs4] =  findpeaks(app.filtered(4,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes4 = locs4;
                        end

                        for q = 1:length(StimTimes4)
                            holdthing4(q,:) = StimTimes4(1,q):StimTimes4(1,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing4 = holdthing4';
                            FullStim4 = holderthing4(:)';
                        end
                        StimBursts4 = length(find(ismember(app.biglocs4, FullStim4) == 1));
                        SpontBursts4 = length(find(ismember(app.biglocs4, FullStim4) == 0));
                        SpontFreq(4) = app.sampfreq*SpontBursts4/abs(((length(app.data(4,:))-length(FullStim4))));
                        StimFreq(4) = app.sampfreq*StimBursts4/(length(FullStim4));
                    end
                    if  app.ChannelsUsed(5) == 1
                        FullStim5 =[];
                        if app.TriggerState1 == 1
                            StimTimes5 = app.StimTimes(5,~isnan(app.StimTimes(5,:)));
                        else
                            [pks5, locs5] =  findpeaks(app.filtered(5,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes5 = locs5;
                        end

                        for q = 1:length(StimTimes5)
                            holdthing5(q,:) = StimTimes5(5,q):StimTimes1(5,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing5 = holdthing5';
                            FullStim5 = holderthing5(:)';
                        end
                        StimBursts5 = length(find(ismember(app.biglocs5, FullStim5) == 1));
                        SpontBursts5 = length(find(ismember(app.biglocs5, FullStim5) == 0));
                        SpontFreq(5) = app.sampfreq*SpontBursts5/((length(app.data(5,:))-length(FullStim5)));
                        StimFreq(5) = app.sampfreq*StimBursts5/(length(FullStim5));
                    end
                    if  app.ChannelsUsed(6) == 1
                        FullStim6 =[];
                        if app.TriggerState1 == 1
                            StimTimes6 = app.StimTimes(6,~isnan(app.StimTimes(6,:)));
                        else
                            [pks6, locs6] =  findpeaks(app.filtered(6,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes6 = locs6;
                        end

                        for q = 1:length(StimTimes6)
                            holdthing6(q,:) = StimTimes6(6,q):StimTimes1(6,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing6 = holdthing6';
                            FullStim6 = holderthing6(:)';
                        end
                        StimBursts6 = length(find(ismember(app.biglocs6, FullStim6) == 1));
                        SpontBursts6 = length(find(ismember(app.biglocs6, FullStim6) == 0));
                        SpontFreq(6) = app.sampfreq*SpontBursts6/((length(app.data(6,:))-length(FullStim6)));
                        StimFreq(6) = app.sampfreq*StimBursts6/(length(FullStim6));
                    end
                    if  app.ChannelsUsed(7) == 1
                        FullStim7 =[];
                        if app.TriggerState1 == 1
                            StimTimes7 = app.StimTimes(7,~isnan(app.StimTimes(7,:)));
                        else
                            [pks7, locs7] =  findpeaks(app.filtered(7,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes7 = locs7;
                        end

                        for q = 1:length(StimTimes7)
                            holdthing7(q,:) = StimTimes7(7,q):StimTimes1(7,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing7 = holdthing7';
                            FullStim7 = holderthing7(:)';
                        end
                        StimBursts7 = length(find(ismember(app.biglocs7, FullStim7) == 1));
                        SpontBursts7 = length(find(ismember(app.biglocs7, FullStim7) == 0));
                        SpontFreq(7) = app.sampfreq*SpontBursts7/((length(app.data(7,:))-length(FullStim7)));
                        StimFreq(7) = app.sampfreq*StimBursts7/(length(FullStim7));
                    end
                    if  app.ChannelsUsed(8) == 1
                        FullStim8 =[];
                        if app.TriggerState1 == 1
                            StimTimes8 = app.StimTimes(8,~isnan(app.StimTimes(8,:)));
                        else
                            [pks8, locs8] =  findpeaks(app.filtered(8,:), 'MinPeakHeight', stimthresh(i));
                            StimTimes8 = locs8;
                        end

                        for q = 1:length(StimTimes8)
                            holdthing8(q,:) = StimTimes8(8,q):StimTimes1(8,q) + (app.sampfreq*app.PostStimulationWindowsEditField.Value);
                            holderthing8 = holdthing8';
                            FullStim8 = holderthing8(:)';
                        end
                        StimBursts8 = length(find(ismember(app.biglocs8, FullStim8) == 1));
                        SpontBursts8 = length(find(ismember(app.biglocs8, FullStim8) == 0));
                        SpontFreq(8) = app.sampfreq*SpontBursts8/((length(app.data(8,:))-length(FullStim8)));
                        StimFreq(8) = app.sampfreq*StimBursts8/(length(FullStim8));
                    end
                else
                  a = numbursts
                    SpontFreq =  app.sampfreq*numbursts(1:i)/(length(app.filtered(1,:)));
                    StimFreq =  nan(1, length(ToFilter));
                end
            end
            FreqTable = [SpontFreq; StimFreq];
            app.BurstFrequency.Data = FreqTable;
            %Write relevant measurements to a table to be exported later
            %Order of variables: ["Mean Duration(samples)", "StDev Duration(samples)", "Mean Duration(s)",...
            % "StDev Duration(seconds)", "Mean Peak Amplitude", "StDev Peak Amplitude",...
            % "Mean Rectified Integrated Trace", "StDeV Rectified Integrated Trace",...
            % "Number of Bursts", "Mean number of interburst spikes", "Burst Frequency"]
            for i = 1:length(ToFilter)
                app.HoldTable(1,i) = meanduration(i);
                app.HoldTable(2,i) = stdduration(i);
                app.HoldTable(3,i) = meandurationseconds(i);
                app.HoldTable(4,i) = stddurationseconds(i);
                app.HoldTable(5,i) = meanamplitude(i);
                app.HoldTable(6,i) = stdamplitude(i);
                app.HoldTable(7,i) = meanrectint(i);
                app.HoldTable(8,i) = stdrectint(i);
                app.HoldTable(9,i) = numbursts(i);
                app.HoldTable(10,i) = numspikes(i);
                app.HoldTable(11,i) = app.sampfreq*numbursts(i)/length(app.data(i,:));
                app.HoldTable(12,i) = SpontFreq(i);
                app.HoldTable(13,i) = StimFreq(i);
            end
            app.f1
            app.powerspectrum = [app.f1; app.p1; app.f2; app.p2; app.f3; app.f4; app.p4; app.f5; app.p5;...
                app.f6; app.p6; app.f7; app.p7; app.f8; app.p8]
            
            TimeToGraph(app)

        end

        function PhaseAnalysis(app)
            %Create an array for each channel of all time indices during
            %bursting: PhaseArray(x,:) is the final output, written into an
            %arrray of NaN in order to keep all outputs the same length for
            %later analysis. SubLength(x) holds the original length of the
            %burst index array

            %Channel  1
            BurstVector1 = [];
            PhaseVector1 = [];
            PhaseList1 = [];
            ToPhase = find(app.ChannelsUsed > 0);
            SubLength = zeros(8,1);
            PhaseArray = NaN(8,length(app.filtered));
            if app.biglocs1 > 0 
                for i=1: length(app.firstloc1)
                    BurstVector1 = ismember(app.filtered(1,:), app.filtered(1,app.firstloc1(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc1(i)+app.BuffertimemsEditField.Value));
                    PhaseList1 = find(BurstVector1 == 1);
                    PhaseVector1 = [PhaseVector1,PhaseList1];
                    SubLength(1) = length(PhaseVector1);
                    PhaseArray(1, 1:length(PhaseVector1)) = PhaseVector1;
                end
            end

            %Channel  2
            BurstVector2 = [];
            PhaseVector2 = [];
            PhaseList2 = [];
            if app.biglocs2 > 0 
                for i=1: length(app.firstloc2)
                    BurstVector2 = ismember(app.filtered(2,:), app.filtered(2,app.firstloc2(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc2(i)+app.BuffertimemsEditField.Value));
                    PhaseList2 = find(BurstVector2 == 1);
                    PhaseVector2 = [PhaseVector2,PhaseList2];
                    Sublength(2) = length(PhaseVector2);
                    PhaseArray(2, 1:length(PhaseVector2)) = PhaseVector2;
                end
            end

            %Channel  3
            BurstVector3 = [];
            PhaseVector3 = [];
            PhaseList3 = [];
            if app.biglocs3 > 0 
                for i=1: length(app.firstloc3)
                    BurstVector3 = ismember(app.filtered(3,:), app.filtered(3,app.firstloc3(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc3(i)+app.BuffertimemsEditField.Value));
                    PhaseList3 = find(BurstVector3 == 1);
                    PhaseVector3 = [PhaseVector3,PhaseList3];
                    Sublength(3) = length(PhaseVector3);
                    PhaseArray(3, 1:length(PhaseVector3)) = PhaseVector3;
                end
            end

            %Channel  4
            BurstVector4 = [];
            PhaseVector4 = [];
            PhaseList4 = [];
            if app.biglocs4 > 0 
                for i=1: length(app.firstloc4)
                    BurstVector4 = ismember(app.filtered(4,:), app.filtered(4,app.firstloc4(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc4(i)+app.BuffertimemsEditField.Value));
                    PhaseList4 = find(BurstVector4 == 1);
                    PhaseVector4 = [PhaseVector4,PhaseList4];
                    Sublength(4) = length(PhaseVector4);
                    PhaseArray(4, 1:length(PhaseVector4)) = PhaseVector4;
                end
            end

            %Channel  5
            BurstVector5 = [];
            PhaseVector5 = [];
            PhaseList5 = [];
            if app.biglocs5 > 0 
                for i=1: length(app.firstloc5)
                    BurstVector5 = ismember(app.filtered(5,:), app.filtered(5,app.firstloc5(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc5(i)+app.BuffertimemsEditField.Value));
                    PhaseList5 = find(BurstVector5 == 1);
                    PhaseVector5 = [PhaseVector5,PhaseList5];
                    Sublength(5) = length(PhaseVector5);
                    PhaseArray(5, 1:length(PhaseVector5)) = PhaseVector5;
                end
            end

            %Channel  6
            BurstVector6 = [];
            PhaseVector6 = [];
            PhaseList6 = [];
            if app.biglocs6 > 0 
                for i=1: length(app.firstloc6)
                    BurstVector6 = ismember(app.filtered(6,:), app.filtered(6,app.firstloc6(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc6(i)+app.BuffertimemsEditField.Value));
                    PhaseList6 = find(BurstVector6 == 1);
                    PhaseVector6 = [PhaseVector6,PhaseList6];
                    Sublength(6) = length(PhaseVector6);
                    PhaseArray(6, 1:length(PhaseVector6)) = PhaseVector6;
                end
            end

            %Channel  7
            BurstVector7 = [];
            PhaseVector7 = [];
            PhaseList7 = [];
            if app.biglocs7 > 0 
                for i=1: length(app.firstloc7)
                    BurstVector7 = ismember(app.filtered(7,:), app.filtered(7,app.firstloc7(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc7(i)+app.BuffertimemsEditField.Value));
                    PhaseList7 = find(BurstVector7 == 1);
                    PhaseVector7 = [PhaseVector7,PhaseList7];
                    Sublength(7) = length(PhaseVector7);
                    PhaseArray(7, 1:length(PhaseVector7)) = PhaseVector7;
                end
            end

            %Channel  8
            BurstVector8 = [];
            PhaseVector8 = [];
            PhaseList8 = [];
            if app.biglocs8 > 0 
                for i=1: length(app.firstloc8)
                    BurstVector8 = ismember(app.filtered(8,:), app.filtered(8,app.firstloc8(i)-app.BuffertimemsEditField.Value...
                        :app.lastloc8(i)+app.BuffertimemsEditField.Value));
                    PhaseList8 = find(BurstVector8 == 1);
                    PhaseVector8 = [PhaseVector8,PhaseList8];
                    Sublength(8) = length(PhaseVector8);
                    PhaseArray(8, 1:length(PhaseVector8)) = PhaseVector8;
                end
            end

            %Run through all possible combinations of channels loaded into
            %the program
            combtable = [];
            combmat = combinator(length(ToPhase),2,'c');
            for i = 1:height(combmat)
                lft = combmat(i,1);
                rght = combmat(i,2);
                for i =1:length(ToPhase)
                    lentest = ~isnan(PhaseArray);
                    lenuse(i) = length(find(lentest == 1));
                end
                SubMax = max(lenuse(lft), lenuse(rght));
                ChMatch =  ismember(PhaseArray(lft,:), PhaseArray(rght,:));
                ChMatch_length = length(find(ChMatch == 1));
                ChPercent(i) = 100*(ChMatch_length/SubMax);
                combtable(lft, rght) = ChPercent(i);
            end
            app.UITable.Data = combtable;
            app.CoBurstTable = combtable;
            app.AllBurstTimes = PhaseArray;

            UpdatePolar(app)
        end

        function Raster(app)
            hold(app.RasterPlot, 'on');
            if ~isempty(app.biglocs1) 
                BurstVector1 = ismember(app.filtered(1,:), app.filtered(1,app.firstloc1));
                PlotVector1 = find(BurstVector1==1);
                plot(app.RasterPlot, PlotVector1, 1, 'r|', 'MarkerSize', 10, 'LineWidth',2)
                app.RasterData(1,1:length(PlotVector1)) = PlotVector1;
            end
            if ~isempty(app.biglocs2) 
                BurstVector2 = ismember(app.filtered(2,:), app.filtered(2, app.firstloc2));
                PlotVector2 = find(BurstVector2 == 1);
                plot(app.RasterPlot, PlotVector2, 2, 'g|', 'MarkerSize', 10, 'LineWidth',2)
                app.RasterData(2,1:length(PlotVector2)) = PlotVector2;
            end
            if ~isempty(app.biglocs3) 
                BurstVector3 = ismember(app.filtered(3,:), app.filtered(3, app.firstloc3));
                PlotVector3 = find(BurstVector3 == 1);
                plot(app.RasterPlot, PlotVector3, 3, 'b|', 'MarkerSize', 10, 'LineWidth',2)
                app.RasterData(3,1:length(PlotVector3)) = PlotVector3;
            end
            a = app.biglocs4
            if ~isempty(app.biglocs4) 
                BurstVector4 = ismember(app.filtered(4,:), app.filtered(4,app.firstloc4));
                PlotVector4 = find(BurstVector4 == 1);
                plot(app.RasterPlot, PlotVector4, 4, 'c|', 'MarkerSize', 10, 'LineWidth',2)
                app.RasterData(4,1:length(PlotVector4)) = PlotVector4;
            end
            if ~isempty(app.biglocs5) 
                BurstVector5 = ismember(app.filtered(5,:), app.filtered(5,app.firstloc5));
                PlotVector5 = find(BurstVector5 == 1);
                plot(app.RasterPlot, PlotVector5, 5, 'm|', 'MarkerSize', 10, 'LineWidth',2)
                app.RasterData(5,1:length(PlotVector5)) = PlotVector5;
            end
            if ~isempty(app.biglocs6) 
                BurstVector6 = ismember(app.filtered(6,:), app.filtered(6,app.firstloc6));
                PlotVector6 = find(BurstVector6 == 1);
                plot(app.RasterPlot, PlotVector6, 6, '#7E2F8E', '|', 'MarkerSize', 10, 'LineWidth',2)
                app.RasterData(6,1:length(PlotVector6)) = PlotVector6;
            end
            if ~isempty(app.biglocs7) 
                BurstVector7 = ismember(app.filtered(7,:), app.filtered(7,app.firstloc7));
                PlotVector7 = find(BurstVector7 == 1);
                plot(app.RasterPlot, PlotVector7, 7, '#FF8a00', 'MarkerSize', 10, 'LineWidth',2)
                app.RasterData(7,1:length(PlotVector7)) = PlotVector7;
            end
            if ~isempty(app.biglocs8) 
                BurstVector8 = ismember(app.filtered(8,:), app.filtered(8,app.firstloc8));
                PlotVector8 = find(BurstVector8 == 1);
                plot(app.RasterPlot, PlotVector8, 8, '#A2142F', '|', 'MarkerSize', 10)
                app.RasterData(8,1:length(PlotVector8)) = PlotVector8;
            end
            
        end

        function ExcelExport(app)
            %Prompt the user for the name and location of the files to be saved
            [app.FileName,app.PathName] = uiputfile('.xls','Save As',char(app.filename));
            if app.FileName==0; return; end
            pathname=[app.pathname char('\')];
%             if isequal(pathname, app.PathName)==0
%                 uiwait(warndlg([sprintf('Due to a MATLAB idiosyncrasy, the Excel file\nwill be saved in the same folder as SpinalMODSensory,\n')...
%                     pathname sprintf(',\nand not the pathway you just selected,\n') PathName...
%                     sprintf('.')],'WARNING','modal'));
%             end

           %Burst Measurements for all channels  
           MeasurementTitle =  {'File', 'Channel', 'Mean_Duration_sample', 'StDev_Duration', 'Mean_Duration_ms', ...
               'StDev_Duration_ms', 'Mean_Amplitude', 'StDev_Amplitude','Mean_Rect_Int', ...
               'StDev_RectInt', 'Number_of_Bursts', 'Mean_Spikes_Per_Burst', 'Burst_Frequency', ...
               'Spontaneous_Burst_Frequency', 'Stimul us_Burst_Frequency'};
           NameArray = repmat(str2num(app.FileName(1:8)), length(find(app.ChannelsUsed == 1)),1);
           NewTable = [NameArray, find(app.ChannelsUsed==1), app.HoldTable.'];
           table1 =  array2table(NewTable, 'VariableNames', MeasurementTitle);
           writetable(table1, app.FileName, 'Sheet', 'Burst_Measurements');

           %Phase plot measurements for all combinations of channels
           writetable(app.phitable, app.FileName, 'Sheet', 'Phase_Analysis');

%            %Power Spectrum Data
%            powertable = [app.powerspectrum, 'VariableNames', {'F1', 'P1', 'F2', 'P2', 'F3', 'P3', 'F4', 'P4', 'F5',...
%                'P5', 'F6', 'P6', 'F7', 'P7', 'F8', 'P8'}]
%            writetable(powertable, app.FileName, 'Sheet', 'Power_Spectrum')
        end

        function UpdatePolar(app)
            cla(app.Pax)
            I = [];
            firstlocs = [];
            lastlocs =  [];
            TotChan = length(find(app.ChannelsUsed == 1));
            PhaseLength = max([length(app.firstloc1),length(app.firstloc2),length(app.firstloc3),...
                length(app.firstloc4),length(app.firstloc5),length(app.firstloc6),...
                length(app.firstloc7),length(app.firstloc8)]);
            Period = nan(8,PhaseLength);
            firstlocs = nan(8, PhaseLength);
            lastlocs = nan(8, PhaseLength);
            if app.ChannelsUsed(1) == 1
                for i =1:length(app.firstloc1)-1
                    Period(1,i) = (app.firstloc1(i+1)-app.firstloc1(i))/app.sampfreq;
                    NumCycles(1) = length(Period(1,~isnan(Period(1,:))));
                    I(1) = app.firstloc1(1);
                    firstlocs(1,1:length(app.firstloc1)) = app.firstloc1;
                    lastlocs(1,1:length(app.lastloc1)) = app.lastloc1;
                end
            end
            if app.ChannelsUsed(2) == 1
                for i =1:length(app.firstloc2)-1
                    Period(2,i) = (app.firstloc2(i+1)-app.firstloc2(i))/app.sampfreq;
                    NumCycles(2) = length(Period(2,~isnan(Period(2,:))));
                    I(2) = app.firstloc2(1);
                    firstlocs(2,1:length(app.firstloc2)) = app.firstloc2;
                    lastlocs(2,1:length(app.lastloc2)) = app.lastloc2;
                end
            end
            if app.ChannelsUsed(3) == 1
                for i =1:length(app.firstloc3)-1
                    Period(3,i) = (app.firstloc3(i+1)-app.firstloc3(i))/app.sampfreq;
                    NumCycles(3) = length(Period(3,~isnan(Period(3,:))));
                    I(3) = app.firstloc3(1);
                    firstlocs(3,1:length(app.firstloc3)) = app.firstloc3;
                    lastlocs(3,1:length(app.lastloc3)) = app.lastloc3;
                end
            end
            if app.ChannelsUsed(4) == 1
                for i =1:length(app.firstloc4)-1
                    Period(4,i) = (app.firstloc4(i+1)-app.firstloc4(i))/app.sampfreq;
                    NumCycles(4) = length(Period(4,~isnan(Period(4,:))));
                    I(4) = app.firstloc4(1);
                    firstlocs(4,1:length(app.firstloc4)) = app.firstloc4;
                    lastlocs(4,1:length(app.lastloc4)) = app.lastloc4;
                end
            end
            if app.ChannelsUsed(5) == 1
                for i =1:length(app.firstloc5)-1
                    Period(5,i) = (app.firstloc5(i+1)-app.firstloc5(i))/app.sampfreq;
                    NumCycles(5) = length(Period(5,~isnan(Period(5,:))));
                    I(5) = app.firstloc5(1);
                    firstlocs(5,1:length(app.firstloc5)) = app.firstloc5;
                    lastlocs(5,1:length(app.lastloc5)) = app.lastloc5;
                end
            end
             if app.ChannelsUsed(6) == 1
                for i =1:length(app.firstloc6)-1
                    Period(6,i) = (app.firstloc6(i+1)-app.firstloc6(i))/app.sampfreq;
                    NumCycles(6) = length(Period(6,~isnan(Period(6,:))));
                    I(6) = app.firstloc6(1);
                    firstlocs(6,1:length(app.firstloc6)) = app.firstloc6;
                    lastlocs(6,1:length(app.lastloc6)) = app.lastloc6;
                end
             end
              if app.ChannelsUsed(7) == 1
                for i =1:length(app.firstloc7)-1
                    Period(7,i) = (app.firstloc7(i+1)-app.firstloc7(i))/app.sampfreq;
                    NumCycles(7) = length(Period(7,~isnan(Period(7,:))));
                    I(7) = app.firstloc7(1);
                    firstlocs(7,1:length(app.firstloc7)) = app.firstloc7;
                    lastlocs(7,1:length(app.lastloc7)) = app.lastloc7;
                end
              end
              if app.ChannelsUsed(8) == 1
                  for i =1:length(app.firstloc8)-1
                      Period(8,i) = (app.firstloc8(i+1)-app.firstloc8(i))/app.sampfreq;
                      NumCycles(8) = length(Period(8,~isnan(Period(8,:))));
                      I(8) = app.firstloc8(1);
                      firstlocs(8,1:length(app.firstloc8)) = app.firstloc8;
                      lastlocs(8,1:length(app.lastloc8)) = app.lastloc8;
                  end
              end

              for i = 1:length(TotChan)
                  meanperiod(i) = mean(Period(i,:));
                  sdperiod(i) = std(Period(i,:));
              end 
              combmat = combinator(TotChan,2,'p','r');
              mincycles =  min(NumCycles(NumCycles ~= 0));
              firstlocs = firstlocs(1:TotChan, 1:mincycles);
              lastlocs = lastlocs(1:TotChan, 1:mincycles);
              avgphi = [];
              sdpgi = [];
              i  = [];
              for i = 1:length(combmat)
                  a = combmat(i,1);
                  atable(i)= combmat(i,1);
                  b = combmat(i,2);
                  btable(i)= combmat(i,2);
                  for q = 1:mincycles
                      latencymid(i,q)  = ((firstlocs(a,q) + lastlocs(a,q))/2 -  (firstlocs(b,q) + lastlocs(b,q))/2)/app.sampfreq;
                      latencyfirst(i,q) = (firstlocs(a,q)-firstlocs(b,q))/app.sampfreq;
                      latencylast(i,q) = (lastlocs(a,q)-lastlocs(b,q))/app.sampfreq;
                      latency(i,q) = (latencymid(i,q)+latencyfirst(i,q)+latencylast(i,q))/3;
                      phi(i,q) = latency(i,q)/Period(a,q);
                      x(i,:) = cos(phi(i,q));
                      y(i,:) = sin(phi(i,q));
                  end
                      avgphi(i) = mean(phi(i,:));
                      sdphi(i) = std(phi(i,:));
                      X(i) = mean(cos(phi(i,:))); Y(i) =  mean(sin(phi(i,:)));
                      r(i)=sqrt(X(i)^2+Y(i)^2);
              end

              %Conversion
              for i =1:length(combmat)
                  plotsdphi(i,:) = pi/2-sdphi(i)*2*pi;
                  plotphi(i,:)=pi/2-phi(i,:)*2*pi;
                  plotavgphi(i)=pi/2-avgphi(i)*2*pi;
              end
              
              phitab = [atable.' ,btable.' , plotavgphi.', plotsdphi, r.'];
              app.phitable = array2table(phitab, 'VariableNames', {'First_Channel', 'Comparison_Channel', 'Average_Phi', 'StDev_Phi', 'Rho'}); 

              color =  {'red', 'green',  'blue', 'cyan', 'magenta', '#7E2F8E', '#FF8a00', '#A2142F'};
              forplot = find(combmat(:,1) == app.ComparisonchannelDropDown.Value-48);
              plotphi = plotphi(forplot,:);
              plotchs =  combmat(forplot,:);
              plotr =  repmat(r(forplot), mincycles);
              for q =  1:length(forplot)
                  hold(app.Pax,  'on')
                  Xq = [];
                  Xq =  plotphi(q,:);
                  for i =  1:length(mincycles)
                      %Marks the outside dots
                      hold(app.Pax, 'on')
                      [Xq(i), Yq(i)]=pol2cart(Xq(i),plotr(i));
                      plotpol = plot(app.Pax, Xq,Yq,'o', 'MarkerFaceColor', color{q}, 'MarkerEdgeColor', color{q}); %Fills in the round marks
                      %Marks the line with the arrow on the end
                      %[Xc(i),Yc(i)]=pol2cart(avgphi(i),r(i))
                  end
                  [comphi, compr] = pol2cart(mean(plotphi(q)), plotr(q));
                  comp = plot(app.Pax, comphi, compr, '^', 'MarkerSize', 22, 'MarkerFaceColor', color{q}, 'MarkerEdgeColor', 'b');
                  meanphi(q) = mean(plotphi(q,:));
                  meanr(q) = mean(plotr(:,q));
              end
              tablechan =  fix(plotchs(:,2));
              phasetab = [tablechan, meanphi.', meanr.'];
              phasetable = table(phasetab);
              app.PhaseTable.Data = phasetab;
        end
    end 

    % Callbacks that handle component events
    methods (Access = private)

        % Code that executes after component creation
        function startupFcn(app)

            app.Pax = polaraxes(app.Panel_2, 'ThetaZeroLocation', 'Top');
            app.Pax.Units = 'pixels';
            app.Pax.Position = [215,295,205,200];
            xdata=[0 1; 0 -1];
            ydata=[1 0; -1 0];
            line(app.Pax, xdata, ydata,'linestyle', '-', 'Color', 'k')%Plots 2 lines across the circle

        end

        % Menu selected function: ExportdatatoExcelMenu
        function ExportdatatoExcelMenuSelected(app, event)
            ExcelExport(app)
        end

        % Menu selected function: OpendatatoanalyzeMenu
        function OpendatatoanalyzeMenuSelected(app, event)

            %Prompts the user for the file to be opened
            drawnow;
            [app.filename,app.pathname]=uigetfile({'*.abf;'}, 'Select a Data File to Open');
            filename=string(app.filename);
            if   strfind(filename, '.abf')
                %Load Waveforms from .abf files to SpinalMODSensory for use
                [d,si,h]=abfload(filename,'start',0,'stop','e');
                app.sampfreq=floor(10^6/si);
                app.FieldNames=string(h.recChNames);
                [D1,~,D3]=size(d);
                TimeOpened=floor((D1*D3)/app.sampfreq);
                data1=d(:,:,1);
                for i=2:size(d,3)
                    data1=cat(1,data1, d(:,:,i));
                end
                data1=data1';

                clear d si h D1 D3
            end


            %The allows the user to select the channels he/she will analyze
            prompt={'Please select up to 8 channels', 'to be analyzed:'};
            %***************************************************************************
            %The variable InValue sets the default channels that are highlighted as
            %the answer choice.  The below if-statement, changes the default answer
            %based on how many channels are in the file that was opened.  If there
            %were 4 or more, then the first 4 are highlighted.  If there were less
            %than 4, then all of them are highlighted.  To change, go to the
            %if/elseif part of the statement with the number of channels present
            %and change InValue to the appropriate values.  For example, if you have 8
            %channels and want the 2nd, 4th, 6th, and 8th highlighted.  Make
            %InValue=[2 4 6 8]; in the part of the if-statement greater than or equal to
            %4 channels.
            if length(app.FieldNames)>=8 %greater than or equal to 8 channels
                app.InValue=[1 2 3 4 5 6 7 8];
            elseif length(app.FieldNames)==7 %equal to 7 channels
                app.InValue=[1 2 3 4 5 6 7];
            elseif length(app.FieldNames)==6 %equal to 6 channels
                app.InValue=[1 2 3 4 5 6];
            elseif length(app.FieldNames)==5 %equal to 5 channels
                app.InValue=[1 2 3 4 5];
            elseif length(app.FieldNames)==4 %equal to 4 channels
                app.InValue=[1 2 3 4];
            elseif length(app.FieldNames)==3 %equal to 3 channels
                app.InValue=[1 2 3];
            elseif length(app.FieldNames)==2 %equal to 2 channels
                app.InValue=[1 2];
            elseif length(app.FieldNames)==1 %equal to 1 channels
                app.InValue=1;
            end
            %********
            %In order to remove the question from being asked, comment out the
            %following line:
            Liststring = string(app.FieldNames);
            ChannelSelection = listdlg('PromptString',prompt,'ListString',Liststring,...
                'InitialValue',app.InValue);
            %And then remove the comment from the following line:
            %ChannelSelection=InValue;
            %**************************************************************************

            %If the user selects more than 8 channels to analyze, the following is an error
            %message and chance to correct the problem
            while length(ChannelSelection) > 8
                uiwait(errordlg('Error!  You have selected more than 8 channels','Error!!!','modal'));
                ChannelSelection = listdlg('Name', 'Select Channels',...
                    'ListSize', [190 120],'ListString', app.FieldNames,...
                    'PromptString', prompt, 'uh', 23, 'fus', 3, 'ffs', 8);
            end
            NumChannelsUsed=length(ChannelSelection);
            %The following asks the user what portion of the file is going to be
            %opened
            prompt = {'What start time from the opened file do you want?',...
                'How many seconds of data would you like to open?',...
                'What start time do you want displayed in the Gui?'};
            title = 'Opening data into the GUI';lines = 1;
            %***************************************************************************
            default = {'0','30','0'};%<-Change the default values for the 3 questions
            %asked above here.  The answers are in the order that the questions are
            %asked.  TimeOpened is the max amount of time in the file and can be replace
            %by a number like '300'.
            %default = {'0','300','0'};
            %**********
            %In order to remove the question from being asked, comment out the
            %following line:
            TimeRange=str2double(inputdlg(prompt,title,lines,default));
            %And then remove the comment from the following line:
            %TimeRange=default;
            %***************************************************************************
            if isempty(TimeRange)==1;
                set(app.DisplayFilename, 'String', 'TITLE/FILENAME');
                return;
            end

            %Set the display name at the top of the GUI
            app.DisplayFileName.Value = string(filename);

            %Selects the indicies to load from the file.
            firstpoint=round(TimeRange(1)*app.sampfreq)+1;%+1 is a correction
            lastpoint=round((TimeRange(1)+TimeRange(2))*app.sampfreq);
            time=firstpoint:1:lastpoint;
            %The following variables set the times to be displayed in the GUI:
            %starting and ending set the start and end times from the opened file to be
            %displayed in the GUI.
            starting=round(TimeRange(3)*app.sampfreq);
            ending=round((TimeRange(3)+TimeRange(2))*app.sampfreq);
            %starttime and endtime are the times currently shown in the GUI
            starttime=starting;
            endtime=ending;

            %Load the data to be analyzed
            %1 indicates that the channel is being used.
            %0 indicates that the channel is not being used.
            app.data(1,:)=data1(ChannelSelection(1),time);
            app.rawdata(1,:) = app.data(1,:); %unfiltered data (same for all channels below)
            app.ChannelsUsed(1,1)=1;

            if NumChannelsUsed>1
                app.data(2,:)=data1(ChannelSelection(2),time);
                app.rawdata(2,:) = app.data(2,:);
                app.ChannelsUsed(2,1)=1;
            end

            if NumChannelsUsed>2
                app.data(3,:)=data1(ChannelSelection(3),time);
                app.rawdata(3,:) = app.data(3,:);
                app.ChannelsUsed(3,1)=1;
            end

            if NumChannelsUsed>3
                app.data(4,:)=data1(ChannelSelection(4),time);
                app.rawdata(4,:) = app.data(4,:);
                app.ChannelsUsed(4,1)=1;
            end

            if NumChannelsUsed>4
                app.data(5,:)=data1(ChannelSelection(5),time);
                app.rawdata(5,:) = app.data(5,:);
                app.ChannelsUsed(5,1)=1;
            end

            if NumChannelsUsed>5
                app.data(6,:)=data1(ChannelSelection(6),time);
                app.rawdata(6,:) = app.data(6,:);
                app.ChannelsUsed(6,1)=1;
            end

            if NumChannelsUsed>6
                app.data(7,:)=data1(ChannelSelection(7),time);
                app.rawdata(7,:) = app.data(7,:);
                app.ChannelsUsed(7,1)=1;
            end

            if NumChannelsUsed>7
                app.data(8,:)=data1(ChannelSelection(8),time);
                app.rawdata(8,:) = app.data(8,:);
                app.ChannelsUsed(8,1)=1;
            end

            clear data1

            FilterData(app)

        end

        % Value changed function: MinInterrbursttimemsEditField_1
        function MinInterrbursttimemsEditField_1ValueChanged(app, event)

        end

        % Value changed function: LowPassKHzKnob
        function LowPassKHzKnobValueChanged(app, event)
            app.LowPassKHzKnob.Value = event.Value;
            FilterData(app)
        end

        % Value changed function: HighPassSwitch
        function HighPassSwitchValueChanged(app, event)
            app.HighPassSwitch.Value  = event.Value;
            hold(app.UIAxes_1, 'off');
            hold(app.UIAxes_2, 'off');
            hold(app.UIAxes_3, 'off');
            hold(app.UIAxes_4, 'off');
            hold(app.UIAxes_5, 'off');
            hold(app.UIAxes_6, 'off');
            hold(app.UIAxes_7, 'off');
            hold(app.UIAxes_8, 'off');
            FilterData(app)
        end

        % Value changed function: LowPassSwitch
        function LowPassSwitchValueChanged(app, event)
            app.LowPassSwitch.Value  = event.Value;
            hold(app.UIAxes_1, 'off');
            hold(app.UIAxes_2, 'off');
            hold(app.UIAxes_3, 'off');
            hold(app.UIAxes_4, 'off');
            hold(app.UIAxes_5, 'off');
            hold(app.UIAxes_6, 'off');
            hold(app.UIAxes_7, 'off');
            hold(app.UIAxes_8, 'off');
            FilterData(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_1
        function RemoveStimulusArtifactButton_1Pushed(app, event)
            app.TriggerState1 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_2
        function RemoveStimulusArtifactButton_2Pushed(app, event)
            app.TriggerState2 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_3
        function RemoveStimulusArtifactButton_3Pushed(app, event)
            app.TriggerState3 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_4
        function RemoveStimulusArtifactButton_4Pushed(app, event)
            app.TriggerState4 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_5
        function RemoveStimulusArtifactButton_5Pushed(app, event)
            app.TriggerState5 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_6
        function RemoveStimulusArtifactButton_6Pushed(app, event)
            app.TriggerState6 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_7
        function RemoveStimulusArtifactButton_7Pushed(app, event)
            app.TriggerState7 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RemoveStimulusArtifactButton_8
        function RemoveStimulusArtifactButton_8Pushed(app, event)
            app.TriggerState8 = 1;
            RemoveArtifact(app)
        end

        % Button pushed function: RunBurstAnalysisButton
        function RunBurstAnalysisButtonPushed(app, event)
            BurstFind(app)
        end

        % Value changed function: HighPassHzKnob
        function HighPassHzKnobValueChanged(app, event)
            app.HighPassHzKnob.Value  = event.Value;
            hold(app.UIAxes_1, 'off');
            hold(app.UIAxes_2, 'off');
            hold(app.UIAxes_3, 'off');
            hold(app.UIAxes_4, 'off');
            hold(app.UIAxes_5, 'off');
            hold(app.UIAxes_6, 'off');
            hold(app.UIAxes_7, 'off');
            hold(app.UIAxes_8, 'off');
            FilterData(app)
        end

        % Button pushed function: RunPhaseAnalysisButton
        function RunPhaseAnalysisButtonPushed(app, event)
            PhaseAnalysis(app)
        end

        % Button pushed function: PlotspikerastersButton
        function PlotspikerastersButtonPushed(app, event)
            Raster(app)
        end

        % Button pushed function: ClearallButton
        function ClearallButtonPushed(app, event)
            % Make current instance of app invisible
            app.SpinalModSensory.Visible = 'off';
            SpinalSensoryBursting();
            close(app.SpinalModSensory)
        end
    end

    % Component initialization
    methods (Access = private)

        % Create UIFigure and components
        function createComponents(app)

            % Create SpinalModSensory and hide until all components are created
            app.SpinalModSensory = uifigure('Visible', 'off');
            app.SpinalModSensory.Position = [100 100 1605 735];
            app.SpinalModSensory.Name = 'UI Figure';

            % Create FileMenu
            app.FileMenu = uimenu(app.SpinalModSensory);
            app.FileMenu.Text = 'File';

            % Create OpendatatoanalyzeMenu
            app.OpendatatoanalyzeMenu = uimenu(app.FileMenu);
            app.OpendatatoanalyzeMenu.MenuSelectedFcn = createCallbackFcn(app, @OpendatatoanalyzeMenuSelected, true);
            app.OpendatatoanalyzeMenu.Text = 'Open data to analyze';

            % Create ExportdatatoExcelMenu
            app.ExportdatatoExcelMenu = uimenu(app.FileMenu);
            app.ExportdatatoExcelMenu.MenuSelectedFcn = createCallbackFcn(app, @ExportdatatoExcelMenuSelected, true);
            app.ExportdatatoExcelMenu.Text = 'Export data to Excel';

            % Create Menu
            app.Menu = uimenu(app.SpinalModSensory);
            app.Menu.Text = 'Menu';

            % Create Channel1Panel
            app.Channel1Panel = uipanel(app.SpinalModSensory);
            app.Channel1Panel.TitlePosition = 'centertop';
            app.Channel1Panel.Title = 'Channel 1';
            app.Channel1Panel.FontWeight = 'bold';
            app.Channel1Panel.Position = [1 495 250 71];

            % Create MinInterrbursttimemsEditFieldLabel
            app.MinInterrbursttimemsEditFieldLabel = uilabel(app.Channel1Panel);
            app.MinInterrbursttimemsEditFieldLabel.HorizontalAlignment = 'right';
            app.MinInterrbursttimemsEditFieldLabel.FontSize = 9;
            app.MinInterrbursttimemsEditFieldLabel.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.MinInterrbursttimemsEditFieldLabel.Position = [100 26 104 22];
            app.MinInterrbursttimemsEditFieldLabel.Text = 'Min Interrburst time (ms)';

            % Create MinInterrbursttimemsEditField_1
            app.MinInterrbursttimemsEditField_1 = uieditfield(app.Channel1Panel, 'numeric');
            app.MinInterrbursttimemsEditField_1.ValueChangedFcn = createCallbackFcn(app, @MinInterrbursttimemsEditField_1ValueChanged, true);
            app.MinInterrbursttimemsEditField_1.FontSize = 9;
            app.MinInterrbursttimemsEditField_1.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.MinInterrbursttimemsEditField_1.Position = [211 26 33 22];
            app.MinInterrbursttimemsEditField_1.Value = 100;

            % Create MinburstdurationmsEditFieldLabel
            app.MinburstdurationmsEditFieldLabel = uilabel(app.Channel1Panel);
            app.MinburstdurationmsEditFieldLabel.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditFieldLabel.FontSize = 9;
            app.MinburstdurationmsEditFieldLabel.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.MinburstdurationmsEditFieldLabel.Position = [109 2 99 22];
            app.MinburstdurationmsEditFieldLabel.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_1
            app.MinburstdurationmsEditField_1 = uieditfield(app.Channel1Panel, 'numeric');
            app.MinburstdurationmsEditField_1.FontSize = 9;
            app.MinburstdurationmsEditField_1.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.MinburstdurationmsEditField_1.Position = [211 2 33 22];
            app.MinburstdurationmsEditField_1.Value = 50;

            % Create SpinalLevelEditFieldLabel
            app.SpinalLevelEditFieldLabel = uilabel(app.Channel1Panel);
            app.SpinalLevelEditFieldLabel.HorizontalAlignment = 'right';
            app.SpinalLevelEditFieldLabel.Position = [18 26 70 22];
            app.SpinalLevelEditFieldLabel.Text = 'Spinal Level';

            % Create SpinalLevelEditField_1
            app.SpinalLevelEditField_1 = uieditfield(app.Channel1Panel, 'numeric');
            app.SpinalLevelEditField_1.Position = [10 3 100 22];

            % Create Panel
            app.Panel = uipanel(app.SpinalModSensory);
            app.Panel.Position = [250 1 906 706];

            % Create UIAxes_1
            app.UIAxes_1 = uiaxes(app.Panel);
            title(app.UIAxes_1, 'Channel 1')
            app.UIAxes_1.PlotBoxAspectRatio = [2.7 1 1];
            app.UIAxes_1.FontWeight = 'bold';
            app.UIAxes_1.Position = [1 532 389 171];

            % Create UIAxes_2
            app.UIAxes_2 = uiaxes(app.Panel);
            title(app.UIAxes_2, 'Channel 2')
            app.UIAxes_2.PlotBoxAspectRatio = [2.95652173913043 1 1];
            app.UIAxes_2.FontWeight = 'bold';
            app.UIAxes_2.Position = [1 356 389 171];

            % Create UIAxes_5
            app.UIAxes_5 = uiaxes(app.Panel);
            title(app.UIAxes_5, 'Channel 5')
            app.UIAxes_5.PlotBoxAspectRatio = [2.95652173913043 1 1];
            app.UIAxes_5.FontWeight = 'bold';
            app.UIAxes_5.Position = [455 533 389 171];

            % Create UIAxes_6
            app.UIAxes_6 = uiaxes(app.Panel);
            title(app.UIAxes_6, 'Channel 6')
            app.UIAxes_6.PlotBoxAspectRatio = [2.95652173913043 1 1];
            app.UIAxes_6.FontWeight = 'bold';
            app.UIAxes_6.Position = [456 356 389 171];

            % Create UIAxes_7
            app.UIAxes_7 = uiaxes(app.Panel);
            title(app.UIAxes_7, 'Channel 7')
            app.UIAxes_7.PlotBoxAspectRatio = [2.95652173913043 1 1];
            app.UIAxes_7.FontWeight = 'bold';
            app.UIAxes_7.Position = [456 179 389 171];

            % Create UIAxes_3
            app.UIAxes_3 = uiaxes(app.Panel);
            title(app.UIAxes_3, 'Channel 3')
            app.UIAxes_3.PlotBoxAspectRatio = [2.95652173913043 1 1];
            app.UIAxes_3.FontWeight = 'bold';
            app.UIAxes_3.Position = [1 178 389 171];

            % Create UIAxes_4
            app.UIAxes_4 = uiaxes(app.Panel);
            title(app.UIAxes_4, 'Channel 4')
            app.UIAxes_4.PlotBoxAspectRatio = [2.95652173913043 1 1];
            app.UIAxes_4.FontWeight = 'bold';
            app.UIAxes_4.Position = [1 1 389 171];

            % Create UIAxes_8
            app.UIAxes_8 = uiaxes(app.Panel);
            title(app.UIAxes_8, 'Channel 8')
            app.UIAxes_8.PlotBoxAspectRatio = [2.95652173913043 1 1];
            app.UIAxes_8.FontWeight = 'bold';
            app.UIAxes_8.Position = [456 2 389 171];

            % Create BurstDetectionLabel
            app.BurstDetectionLabel = uilabel(app.Panel);
            app.BurstDetectionLabel.HorizontalAlignment = 'right';
            app.BurstDetectionLabel.Position = [48 662 89 22];
            app.BurstDetectionLabel.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_1
            app.BurstDetectionDropDown_1 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_1.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_1.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_1.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_1.Position = [152 662 100 22];
            app.BurstDetectionDropDown_1.Value = '1';

            % Create BurstDetectionDropDown_2Label
            app.BurstDetectionDropDown_2Label = uilabel(app.Panel);
            app.BurstDetectionDropDown_2Label.HorizontalAlignment = 'right';
            app.BurstDetectionDropDown_2Label.Position = [48 482 89 22];
            app.BurstDetectionDropDown_2Label.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_2
            app.BurstDetectionDropDown_2 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_2.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_2.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_2.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_2.Position = [152 482 100 22];
            app.BurstDetectionDropDown_2.Value = '1';

            % Create BurstDetectionDropDown_3Label
            app.BurstDetectionDropDown_3Label = uilabel(app.Panel);
            app.BurstDetectionDropDown_3Label.HorizontalAlignment = 'right';
            app.BurstDetectionDropDown_3Label.Position = [48 303 89 22];
            app.BurstDetectionDropDown_3Label.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_3
            app.BurstDetectionDropDown_3 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_3.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_3.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_3.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_3.Position = [152 303 100 22];
            app.BurstDetectionDropDown_3.Value = '1';

            % Create BurstDetectionDropDown_4Label
            app.BurstDetectionDropDown_4Label = uilabel(app.Panel);
            app.BurstDetectionDropDown_4Label.HorizontalAlignment = 'right';
            app.BurstDetectionDropDown_4Label.Position = [48 125 89 22];
            app.BurstDetectionDropDown_4Label.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_4
            app.BurstDetectionDropDown_4 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_4.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_4.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_4.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_4.Position = [152 125 100 22];
            app.BurstDetectionDropDown_4.Value = '1';

            % Create BurstDetectionDropDown_5Label
            app.BurstDetectionDropDown_5Label = uilabel(app.Panel);
            app.BurstDetectionDropDown_5Label.HorizontalAlignment = 'right';
            app.BurstDetectionDropDown_5Label.Position = [502 659 89 22];
            app.BurstDetectionDropDown_5Label.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_5
            app.BurstDetectionDropDown_5 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_5.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_5.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_5.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_5.Position = [606 659 100 22];
            app.BurstDetectionDropDown_5.Value = '1';

            % Create BurstDetectionDropDown_6Label
            app.BurstDetectionDropDown_6Label = uilabel(app.Panel);
            app.BurstDetectionDropDown_6Label.HorizontalAlignment = 'right';
            app.BurstDetectionDropDown_6Label.Position = [502 481 89 22];
            app.BurstDetectionDropDown_6Label.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_6
            app.BurstDetectionDropDown_6 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_6.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_6.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_6.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_6.Position = [606 481 100 22];
            app.BurstDetectionDropDown_6.Value = '1';

            % Create BurstDetectionDropDown_7Label
            app.BurstDetectionDropDown_7Label = uilabel(app.Panel);
            app.BurstDetectionDropDown_7Label.HorizontalAlignment = 'right';
            app.BurstDetectionDropDown_7Label.Position = [502 303 89 22];
            app.BurstDetectionDropDown_7Label.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_7
            app.BurstDetectionDropDown_7 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_7.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_7.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_7.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_7.Position = [606 303 100 22];
            app.BurstDetectionDropDown_7.Value = '1';

            % Create BurstDetectionDropDown_8Label
            app.BurstDetectionDropDown_8Label = uilabel(app.Panel);
            app.BurstDetectionDropDown_8Label.HorizontalAlignment = 'right';
            app.BurstDetectionDropDown_8Label.Position = [502 125 89 22];
            app.BurstDetectionDropDown_8Label.Text = 'Burst Detection';

            % Create BurstDetectionDropDown_8
            app.BurstDetectionDropDown_8 = uidropdown(app.Panel);
            app.BurstDetectionDropDown_8.Items = {'5x RMS noise', '90% of max trace value', '70% of max trace value', '50% of max trace value', '30% of max trace value', 'Mean of whole trace ', 'Manual selection'};
            app.BurstDetectionDropDown_8.ItemsData = {'1', '2', '3', '4', '5', '6', '7'};
            app.BurstDetectionDropDown_8.Tooltip = {'Select burst threshold method (must re-run burst analysis after selecting)'};
            app.BurstDetectionDropDown_8.Position = [606 125 100 22];
            app.BurstDetectionDropDown_8.Value = '1';

            % Create RemoveStimulusArtifactButton_1
            app.RemoveStimulusArtifactButton_1 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_1.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_1Pushed, true);
            app.RemoveStimulusArtifactButton_1.FontSize = 8;
            app.RemoveStimulusArtifactButton_1.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_1.Position = [259 662 121 22];
            app.RemoveStimulusArtifactButton_1.Text = 'Remove Stimulus Artifact';

            % Create RemoveStimulusArtifactButton_2
            app.RemoveStimulusArtifactButton_2 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_2.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_2Pushed, true);
            app.RemoveStimulusArtifactButton_2.FontSize = 8;
            app.RemoveStimulusArtifactButton_2.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_2.Position = [259 482 121 22];
            app.RemoveStimulusArtifactButton_2.Text = 'Remove Stimulus Artifact';

            % Create RemoveStimulusArtifactButton_3
            app.RemoveStimulusArtifactButton_3 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_3.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_3Pushed, true);
            app.RemoveStimulusArtifactButton_3.FontSize = 8;
            app.RemoveStimulusArtifactButton_3.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_3.Position = [259 303 121 22];
            app.RemoveStimulusArtifactButton_3.Text = 'Remove Stimulus Artifact';

            % Create RemoveStimulusArtifactButton_4
            app.RemoveStimulusArtifactButton_4 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_4.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_4Pushed, true);
            app.RemoveStimulusArtifactButton_4.FontSize = 8;
            app.RemoveStimulusArtifactButton_4.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_4.Position = [259 125 121 22];
            app.RemoveStimulusArtifactButton_4.Text = 'Remove Stimulus Artifact';

            % Create RemoveStimulusArtifactButton_5
            app.RemoveStimulusArtifactButton_5 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_5.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_5Pushed, true);
            app.RemoveStimulusArtifactButton_5.FontSize = 8;
            app.RemoveStimulusArtifactButton_5.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_5.Position = [714 659 121 22];
            app.RemoveStimulusArtifactButton_5.Text = 'Remove Stimulus Artifact';

            % Create RemoveStimulusArtifactButton_6
            app.RemoveStimulusArtifactButton_6 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_6.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_6Pushed, true);
            app.RemoveStimulusArtifactButton_6.FontSize = 8;
            app.RemoveStimulusArtifactButton_6.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_6.Position = [714 481 121 22];
            app.RemoveStimulusArtifactButton_6.Text = 'Remove Stimulus Artifact';

            % Create RemoveStimulusArtifactButton_7
            app.RemoveStimulusArtifactButton_7 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_7.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_7Pushed, true);
            app.RemoveStimulusArtifactButton_7.FontSize = 8;
            app.RemoveStimulusArtifactButton_7.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_7.Position = [714 303 121 22];
            app.RemoveStimulusArtifactButton_7.Text = 'Remove Stimulus Artifact';

            % Create RemoveStimulusArtifactButton_8
            app.RemoveStimulusArtifactButton_8 = uibutton(app.Panel, 'push');
            app.RemoveStimulusArtifactButton_8.ButtonPushedFcn = createCallbackFcn(app, @RemoveStimulusArtifactButton_8Pushed, true);
            app.RemoveStimulusArtifactButton_8.FontSize = 8;
            app.RemoveStimulusArtifactButton_8.Tooltip = {'Remove all peaks higher than 300 µV (medium and high voltage stimuli)'};
            app.RemoveStimulusArtifactButton_8.Position = [714 125 121 22];
            app.RemoveStimulusArtifactButton_8.Text = 'Remove Stimulus Artifact';

            % Create ThresholdEditFieldLabel
            app.ThresholdEditFieldLabel = uilabel(app.Panel);
            app.ThresholdEditFieldLabel.HorizontalAlignment = 'right';
            app.ThresholdEditFieldLabel.Position = [383 670 59 22];
            app.ThresholdEditFieldLabel.Text = 'Threshold';

            % Create ThresholdEditField_1
            app.ThresholdEditField_1 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_1.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.ThresholdEditField_1.Position = [387 649 54 22];

            % Create BurstcountEditFieldLabel
            app.BurstcountEditFieldLabel = uilabel(app.Panel);
            app.BurstcountEditFieldLabel.HorizontalAlignment = 'right';
            app.BurstcountEditFieldLabel.Position = [381 582 67 22];
            app.BurstcountEditFieldLabel.Text = 'Burst count';

            % Create BurstcountEditField_1
            app.BurstcountEditField_1 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_1.Position = [388 561 54 22];

            % Create ThresholdEditField_2Label
            app.ThresholdEditField_2Label = uilabel(app.Panel);
            app.ThresholdEditField_2Label.HorizontalAlignment = 'right';
            app.ThresholdEditField_2Label.Position = [383 492 59 22];
            app.ThresholdEditField_2Label.Text = 'Threshold';

            % Create ThresholdEditField_2
            app.ThresholdEditField_2 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_2.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.ThresholdEditField_2.Position = [387 471 54 22];

            % Create BurstcountEditField_2Label
            app.BurstcountEditField_2Label = uilabel(app.Panel);
            app.BurstcountEditField_2Label.HorizontalAlignment = 'right';
            app.BurstcountEditField_2Label.Position = [381 410 67 22];
            app.BurstcountEditField_2Label.Text = 'Burst count';

            % Create BurstcountEditField_2
            app.BurstcountEditField_2 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_2.Position = [388 389 54 22];

            % Create ThresholdEditField_3Label
            app.ThresholdEditField_3Label = uilabel(app.Panel);
            app.ThresholdEditField_3Label.HorizontalAlignment = 'right';
            app.ThresholdEditField_3Label.Position = [383 314 59 22];
            app.ThresholdEditField_3Label.Text = 'Threshold';

            % Create ThresholdEditField_3
            app.ThresholdEditField_3 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_3.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.ThresholdEditField_3.Position = [387 293 54 22];

            % Create BurstcountEditField_3Label
            app.BurstcountEditField_3Label = uilabel(app.Panel);
            app.BurstcountEditField_3Label.HorizontalAlignment = 'right';
            app.BurstcountEditField_3Label.Position = [381 228 67 22];
            app.BurstcountEditField_3Label.Text = 'Burst count';

            % Create BurstcountEditField_3
            app.BurstcountEditField_3 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_3.Position = [388 207 54 22];

            % Create ThresholdEditField_4Label
            app.ThresholdEditField_4Label = uilabel(app.Panel);
            app.ThresholdEditField_4Label.HorizontalAlignment = 'right';
            app.ThresholdEditField_4Label.Position = [383 132 59 22];
            app.ThresholdEditField_4Label.Text = 'Threshold';

            % Create ThresholdEditField_4
            app.ThresholdEditField_4 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_4.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.ThresholdEditField_4.Position = [387 111 54 22];

            % Create BurstcountEditField_4Label
            app.BurstcountEditField_4Label = uilabel(app.Panel);
            app.BurstcountEditField_4Label.HorizontalAlignment = 'right';
            app.BurstcountEditField_4Label.Position = [381 47 67 22];
            app.BurstcountEditField_4Label.Text = 'Burst count';

            % Create BurstcountEditField_4
            app.BurstcountEditField_4 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_4.Position = [388 26 54 22];

            % Create ThresholdEditField_5Label
            app.ThresholdEditField_5Label = uilabel(app.Panel);
            app.ThresholdEditField_5Label.HorizontalAlignment = 'right';
            app.ThresholdEditField_5Label.Position = [835 670 59 22];
            app.ThresholdEditField_5Label.Text = 'Threshold';

            % Create ThresholdEditField_5
            app.ThresholdEditField_5 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_5.Tooltip = {'Burst threshold amplitude (if dropdown is set to manual threshold, use this box to set the value)'};
            app.ThresholdEditField_5.Position = [839 649 54 22];

            % Create BurstcountEditField_5Label
            app.BurstcountEditField_5Label = uilabel(app.Panel);
            app.BurstcountEditField_5Label.HorizontalAlignment = 'right';
            app.BurstcountEditField_5Label.Position = [835 582 67 22];
            app.BurstcountEditField_5Label.Text = 'Burst count';

            % Create BurstcountEditField_5
            app.BurstcountEditField_5 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_5.Position = [842 561 54 22];

            % Create ThresholdEditField_6Label
            app.ThresholdEditField_6Label = uilabel(app.Panel);
            app.ThresholdEditField_6Label.HorizontalAlignment = 'right';
            app.ThresholdEditField_6Label.Position = [838 492 59 22];
            app.ThresholdEditField_6Label.Text = 'Threshold';

            % Create ThresholdEditField_6
            app.ThresholdEditField_6 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_6.Position = [842 471 54 22];

            % Create BurstcountEditField_6Label
            app.BurstcountEditField_6Label = uilabel(app.Panel);
            app.BurstcountEditField_6Label.HorizontalAlignment = 'right';
            app.BurstcountEditField_6Label.Position = [833 410 67 22];
            app.BurstcountEditField_6Label.Text = 'Burst count';

            % Create BurstcountEditField_6
            app.BurstcountEditField_6 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_6.Position = [840 389 54 22];

            % Create ThresholdEditField_7Label
            app.ThresholdEditField_7Label = uilabel(app.Panel);
            app.ThresholdEditField_7Label.HorizontalAlignment = 'right';
            app.ThresholdEditField_7Label.Position = [837 313 59 22];
            app.ThresholdEditField_7Label.Text = 'Threshold';

            % Create ThresholdEditField_7
            app.ThresholdEditField_7 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_7.Position = [841 292 54 22];

            % Create BurstcountEditField_7Label
            app.BurstcountEditField_7Label = uilabel(app.Panel);
            app.BurstcountEditField_7Label.HorizontalAlignment = 'right';
            app.BurstcountEditField_7Label.Position = [835 228 67 22];
            app.BurstcountEditField_7Label.Text = 'Burst count';

            % Create BurstcountEditField_7
            app.BurstcountEditField_7 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_7.Position = [842 207 54 22];

            % Create ThresholdEditField_8Label
            app.ThresholdEditField_8Label = uilabel(app.Panel);
            app.ThresholdEditField_8Label.HorizontalAlignment = 'right';
            app.ThresholdEditField_8Label.Position = [835 132 59 22];
            app.ThresholdEditField_8Label.Text = 'Threshold';

            % Create ThresholdEditField_8
            app.ThresholdEditField_8 = uieditfield(app.Panel, 'numeric');
            app.ThresholdEditField_8.Position = [839 111 54 22];

            % Create BurstcountEditField_8Label
            app.BurstcountEditField_8Label = uilabel(app.Panel);
            app.BurstcountEditField_8Label.HorizontalAlignment = 'right';
            app.BurstcountEditField_8Label.Position = [833 47 67 22];
            app.BurstcountEditField_8Label.Text = 'Burst count';

            % Create BurstcountEditField_8
            app.BurstcountEditField_8 = uieditfield(app.Panel, 'numeric');
            app.BurstcountEditField_8.Position = [840 26 54 22];

            % Create StimulusLabel
            app.StimulusLabel = uilabel(app.Panel);
            app.StimulusLabel.HorizontalAlignment = 'right';
            app.StimulusLabel.Position = [387 628 55 22];
            app.StimulusLabel.Text = 'Stimulus ';

            % Create StimEditField_1
            app.StimEditField_1 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_1.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_1.Position = [387 607 54 22];
            app.StimEditField_1.Value = 300;

            % Create StimulusLabel_2
            app.StimulusLabel_2 = uilabel(app.Panel);
            app.StimulusLabel_2.HorizontalAlignment = 'right';
            app.StimulusLabel_2.Position = [387 450 55 22];
            app.StimulusLabel_2.Text = 'Stimulus ';

            % Create StimEditField_2
            app.StimEditField_2 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_2.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_2.Position = [387 429 54 22];
            app.StimEditField_2.Value = 300;

            % Create StimulusLabel_3
            app.StimulusLabel_3 = uilabel(app.Panel);
            app.StimulusLabel_3.HorizontalAlignment = 'right';
            app.StimulusLabel_3.Position = [386 272 55 22];
            app.StimulusLabel_3.Text = 'Stimulus ';

            % Create StimEditField_3
            app.StimEditField_3 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_3.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_3.Position = [386 251 54 22];
            app.StimEditField_3.Value = 300;

            % Create StimulusLabel_4
            app.StimulusLabel_4 = uilabel(app.Panel);
            app.StimulusLabel_4.HorizontalAlignment = 'right';
            app.StimulusLabel_4.Position = [387 90 55 22];
            app.StimulusLabel_4.Text = 'Stimulus ';

            % Create StimEditField_4
            app.StimEditField_4 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_4.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_4.Position = [387 69 54 22];
            app.StimEditField_4.Value = 300;

            % Create StimulusLabel_5
            app.StimulusLabel_5 = uilabel(app.Panel);
            app.StimulusLabel_5.HorizontalAlignment = 'right';
            app.StimulusLabel_5.Position = [840 628 55 22];
            app.StimulusLabel_5.Text = 'Stimulus ';

            % Create StimEditField_5
            app.StimEditField_5 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_5.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_5.Position = [840 607 54 22];
            app.StimEditField_5.Value = 300;

            % Create StimulusLabel_6
            app.StimulusLabel_6 = uilabel(app.Panel);
            app.StimulusLabel_6.HorizontalAlignment = 'right';
            app.StimulusLabel_6.Position = [840 450 55 22];
            app.StimulusLabel_6.Text = 'Stimulus ';

            % Create StimEditField_6
            app.StimEditField_6 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_6.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_6.Position = [840 429 54 22];
            app.StimEditField_6.Value = 300;

            % Create StimulusLabel_7
            app.StimulusLabel_7 = uilabel(app.Panel);
            app.StimulusLabel_7.HorizontalAlignment = 'right';
            app.StimulusLabel_7.Position = [840 272 55 22];
            app.StimulusLabel_7.Text = 'Stimulus ';

            % Create StimEditField_7
            app.StimEditField_7 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_7.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_7.Position = [840 251 54 22];
            app.StimEditField_7.Value = 300;

            % Create StimulusLabel_8
            app.StimulusLabel_8 = uilabel(app.Panel);
            app.StimulusLabel_8.HorizontalAlignment = 'right';
            app.StimulusLabel_8.Position = [841 90 55 22];
            app.StimulusLabel_8.Text = 'Stimulus ';

            % Create StimEditField_8
            app.StimEditField_8 = uieditfield(app.Panel, 'numeric');
            app.StimEditField_8.Tooltip = {'Stimulus threshold (only used if above switch is set to "Stimulation"). Any peaks above this height will be stored as stimulus times. '};
            app.StimEditField_8.Position = [841 69 54 22];
            app.StimEditField_8.Value = 300;

            % Create Panel_2
            app.Panel_2 = uipanel(app.SpinalModSensory);
            app.Panel_2.TitlePosition = 'centertop';
            app.Panel_2.FontWeight = 'bold';
            app.Panel_2.FontSize = 18;
            app.Panel_2.Position = [1155 3 448 733];

            % Create PowerSpec
            app.PowerSpec = uiaxes(app.Panel_2);
            title(app.PowerSpec, 'Power Spectrum')
            xlabel(app.PowerSpec, 'Hz')
            ylabel(app.PowerSpec, 'dB')
            app.PowerSpec.Position = [201 541 208 193];

            % Create RasterPlot
            app.RasterPlot = uiaxes(app.Panel_2);
            title(app.RasterPlot, 'Raster')
            app.RasterPlot.YLim = [0 9];
            app.RasterPlot.YTick = [1 2 3 4 5 6 7 8];
            app.RasterPlot.YTickLabel = {'Ch1'; 'Ch2'; 'Ch3'; 'Ch4'; 'Ch5'; 'Ch6'; 'Ch7'; 'Ch8'};
            app.RasterPlot.FontSize = 12;
            app.RasterPlot.Position = [1 372 192 179];

            % Create Waveform
            app.Waveform = uiaxes(app.Panel_2);
            title(app.Waveform, 'Average Waveform')
            app.Waveform.Position = [1 553 192 179];

            % Create UITable
            app.UITable = uitable(app.Panel_2);
            app.UITable.ColumnName = {'Ch1'; 'Ch2'; 'Ch3'; 'Ch4'; 'Ch5'; 'Ch6'; 'Ch7'; 'Ch8'};
            app.UITable.ColumnWidth = {50, 50, 50, 50, 50, 50, 50, 50};
            app.UITable.RowName = {'Ch1'; 'Ch2'; 'Ch3'; 'Ch4'; 'Ch5'; 'Ch6'; 'Ch7'; 'Ch8'};
            app.UITable.Multiselect = 'off';
            app.UITable.FontSize = 9;
            app.UITable.Position = [25 108 402 128];

            % Create PercentageoftimethatburstscooccurLabel
            app.PercentageoftimethatburstscooccurLabel = uilabel(app.Panel_2);
            app.PercentageoftimethatburstscooccurLabel.FontWeight = 'bold';
            app.PercentageoftimethatburstscooccurLabel.Position = [20 241 237 22];
            app.PercentageoftimethatburstscooccurLabel.Text = 'Percentage of time that bursts co-occur';

            % Create BurstFrequency
            app.BurstFrequency = uitable(app.Panel_2);
            app.BurstFrequency.ColumnName = {'Ch1'; 'Ch2'; 'Ch3'; 'Ch4'; 'Ch5'; 'Ch6'; 'Ch7'; 'Ch8'};
            app.BurstFrequency.ColumnWidth = {50, 50, 50, 50, 50, 50, 50, 50};
            app.BurstFrequency.RowName = {'Spontaneous'; 'Post-stimulation'};
            app.BurstFrequency.Position = [21 5 407 74];

            % Create BurstFrequencyHzLabel
            app.BurstFrequencyHzLabel = uilabel(app.Panel_2);
            app.BurstFrequencyHzLabel.FontWeight = 'bold';
            app.BurstFrequencyHzLabel.Position = [21 80 125 22];
            app.BurstFrequencyHzLabel.Text = 'Burst Frequency (Hz)';

            % Create PostStimulationWindowsEditFieldLabel
            app.PostStimulationWindowsEditFieldLabel = uilabel(app.Panel_2);
            app.PostStimulationWindowsEditFieldLabel.HorizontalAlignment = 'right';
            app.PostStimulationWindowsEditFieldLabel.Position = [199 80 157 22];
            app.PostStimulationWindowsEditFieldLabel.Text = 'Post-Stimulation Window (s)';

            % Create PostStimulationWindowsEditField
            app.PostStimulationWindowsEditField = uieditfield(app.Panel_2, 'text');
            app.PostStimulationWindowsEditField.Position = [361 80 67 22];
            app.PostStimulationWindowsEditField.Value = '1';

            % Create BuffertimemsEditFieldLabel
            app.BuffertimemsEditFieldLabel = uilabel(app.Panel_2);
            app.BuffertimemsEditFieldLabel.HorizontalAlignment = 'right';
            app.BuffertimemsEditFieldLabel.Position = [274 240 90 22];
            app.BuffertimemsEditFieldLabel.Text = 'Buffer time (ms)';

            % Create BuffertimemsEditField
            app.BuffertimemsEditField = uieditfield(app.Panel_2, 'text');
            app.BuffertimemsEditField.Position = [367 240 61 22];
            app.BuffertimemsEditField.Value = '50';

            % Create ComparisonchannelDropDownLabel
            app.ComparisonchannelDropDownLabel = uilabel(app.Panel_2);
            app.ComparisonchannelDropDownLabel.HorizontalAlignment = 'right';
            app.ComparisonchannelDropDownLabel.Position = [201 515 116 22];
            app.ComparisonchannelDropDownLabel.Text = 'Comparison channel';

            % Create ComparisonchannelDropDown
            app.ComparisonchannelDropDown = uidropdown(app.Panel_2);
            app.ComparisonchannelDropDown.Items = {'Channel 1', 'Channel 2', 'Channel 3', 'Channel 4', 'Channel 5', 'Channel 6', 'Channel 7', 'Channel 8'};
            app.ComparisonchannelDropDown.ItemsData = {'1', '2', '3', '4', '5', '6', '7', '8'};
            app.ComparisonchannelDropDown.Position = [326 515 100 22];
            app.ComparisonchannelDropDown.Value = '1';

            % Create PhaseTable
            app.PhaseTable = uitable(app.Panel_2);
            app.PhaseTable.ColumnName = {'Channel'; 'Phi'; 'Rho'};
            app.PhaseTable.RowName = {};
            app.PhaseTable.Position = [13 263 180 117];

            % Create Channel2Panel
            app.Channel2Panel = uipanel(app.SpinalModSensory);
            app.Channel2Panel.TitlePosition = 'centertop';
            app.Channel2Panel.Title = 'Channel 2';
            app.Channel2Panel.FontWeight = 'bold';
            app.Channel2Panel.Position = [1 425 250 71];

            % Create MinburstdurationmsEditField_2Label
            app.MinburstdurationmsEditField_2Label = uilabel(app.Channel2Panel);
            app.MinburstdurationmsEditField_2Label.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditField_2Label.FontSize = 9;
            app.MinburstdurationmsEditField_2Label.Position = [111 2 99 22];
            app.MinburstdurationmsEditField_2Label.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_2
            app.MinburstdurationmsEditField_2 = uieditfield(app.Channel2Panel, 'numeric');
            app.MinburstdurationmsEditField_2.FontSize = 9;
            app.MinburstdurationmsEditField_2.Position = [213 2 33 22];
            app.MinburstdurationmsEditField_2.Value = 50;

            % Create MininterbursttimemsEditFieldLabel
            app.MininterbursttimemsEditFieldLabel = uilabel(app.Channel2Panel);
            app.MininterbursttimemsEditFieldLabel.HorizontalAlignment = 'right';
            app.MininterbursttimemsEditFieldLabel.FontSize = 9;
            app.MininterbursttimemsEditFieldLabel.Position = [106 26 100 22];
            app.MininterbursttimemsEditFieldLabel.Text = 'Min interburst time (ms)';

            % Create MininterbursttimemsEditField
            app.MininterbursttimemsEditField = uieditfield(app.Channel2Panel, 'numeric');
            app.MininterbursttimemsEditField.FontSize = 9;
            app.MininterbursttimemsEditField.Position = [213 26 33 22];
            app.MininterbursttimemsEditField.Value = 100;

            % Create Channel3Panel
            app.Channel3Panel = uipanel(app.SpinalModSensory);
            app.Channel3Panel.TitlePosition = 'centertop';
            app.Channel3Panel.Title = 'Channel 3';
            app.Channel3Panel.FontWeight = 'bold';
            app.Channel3Panel.Position = [1 355 250 71];

            % Create MinburstdurationmsEditField_3Label
            app.MinburstdurationmsEditField_3Label = uilabel(app.Channel3Panel);
            app.MinburstdurationmsEditField_3Label.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditField_3Label.FontSize = 9;
            app.MinburstdurationmsEditField_3Label.Position = [111 2 99 22];
            app.MinburstdurationmsEditField_3Label.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_3
            app.MinburstdurationmsEditField_3 = uieditfield(app.Channel3Panel, 'numeric');
            app.MinburstdurationmsEditField_3.FontSize = 9;
            app.MinburstdurationmsEditField_3.Position = [213 2 33 22];
            app.MinburstdurationmsEditField_3.Value = 50;

            % Create MininterbursttimemsEditField_2Label
            app.MininterbursttimemsEditField_2Label = uilabel(app.Channel3Panel);
            app.MininterbursttimemsEditField_2Label.HorizontalAlignment = 'right';
            app.MininterbursttimemsEditField_2Label.FontSize = 9;
            app.MininterbursttimemsEditField_2Label.Position = [106 26 100 22];
            app.MininterbursttimemsEditField_2Label.Text = 'Min interburst time (ms)';

            % Create MininterbursttimemsEditField_2
            app.MininterbursttimemsEditField_2 = uieditfield(app.Channel3Panel, 'numeric');
            app.MininterbursttimemsEditField_2.FontSize = 9;
            app.MininterbursttimemsEditField_2.Position = [213 26 33 22];
            app.MininterbursttimemsEditField_2.Value = 100;

            % Create Channel4Panel
            app.Channel4Panel = uipanel(app.SpinalModSensory);
            app.Channel4Panel.TitlePosition = 'centertop';
            app.Channel4Panel.Title = 'Channel 4';
            app.Channel4Panel.FontWeight = 'bold';
            app.Channel4Panel.Position = [1 285 250 71];

            % Create MinburstdurationmsEditField_4Label
            app.MinburstdurationmsEditField_4Label = uilabel(app.Channel4Panel);
            app.MinburstdurationmsEditField_4Label.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditField_4Label.FontSize = 9;
            app.MinburstdurationmsEditField_4Label.Position = [114 2 99 22];
            app.MinburstdurationmsEditField_4Label.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_4
            app.MinburstdurationmsEditField_4 = uieditfield(app.Channel4Panel, 'numeric');
            app.MinburstdurationmsEditField_4.FontSize = 9;
            app.MinburstdurationmsEditField_4.Position = [216 2 33 22];
            app.MinburstdurationmsEditField_4.Value = 50;

            % Create MininterbursttimemsEditField_3Label
            app.MininterbursttimemsEditField_3Label = uilabel(app.Channel4Panel);
            app.MininterbursttimemsEditField_3Label.HorizontalAlignment = 'right';
            app.MininterbursttimemsEditField_3Label.FontSize = 9;
            app.MininterbursttimemsEditField_3Label.Position = [109 26 100 22];
            app.MininterbursttimemsEditField_3Label.Text = 'Min interburst time (ms)';

            % Create MininterbursttimemsEditField_3
            app.MininterbursttimemsEditField_3 = uieditfield(app.Channel4Panel, 'numeric');
            app.MininterbursttimemsEditField_3.FontSize = 9;
            app.MininterbursttimemsEditField_3.Position = [216 26 33 22];
            app.MininterbursttimemsEditField_3.Value = 100;

            % Create SpinalLevelEditField_4Label
            app.SpinalLevelEditField_4Label = uilabel(app.Channel4Panel);
            app.SpinalLevelEditField_4Label.HorizontalAlignment = 'right';
            app.SpinalLevelEditField_4Label.Position = [18 26 70 22];
            app.SpinalLevelEditField_4Label.Text = 'Spinal Level';

            % Create SpinalLevelEditField_4
            app.SpinalLevelEditField_4 = uieditfield(app.Channel4Panel, 'numeric');
            app.SpinalLevelEditField_4.Position = [10 3 100 22];

            % Create Channel5Panel
            app.Channel5Panel = uipanel(app.SpinalModSensory);
            app.Channel5Panel.TitlePosition = 'centertop';
            app.Channel5Panel.Title = 'Channel 5';
            app.Channel5Panel.FontWeight = 'bold';
            app.Channel5Panel.Position = [1 215 250 71];

            % Create MinburstdurationmsEditField_5Label
            app.MinburstdurationmsEditField_5Label = uilabel(app.Channel5Panel);
            app.MinburstdurationmsEditField_5Label.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditField_5Label.FontSize = 9;
            app.MinburstdurationmsEditField_5Label.Position = [114 2 99 22];
            app.MinburstdurationmsEditField_5Label.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_5
            app.MinburstdurationmsEditField_5 = uieditfield(app.Channel5Panel, 'numeric');
            app.MinburstdurationmsEditField_5.FontSize = 9;
            app.MinburstdurationmsEditField_5.Position = [216 2 33 22];
            app.MinburstdurationmsEditField_5.Value = 50;

            % Create MininterbursttimemsEditField_4Label
            app.MininterbursttimemsEditField_4Label = uilabel(app.Channel5Panel);
            app.MininterbursttimemsEditField_4Label.HorizontalAlignment = 'right';
            app.MininterbursttimemsEditField_4Label.FontSize = 9;
            app.MininterbursttimemsEditField_4Label.Position = [109 26 100 22];
            app.MininterbursttimemsEditField_4Label.Text = 'Min interburst time (ms)';

            % Create MininterbursttimemsEditField_4
            app.MininterbursttimemsEditField_4 = uieditfield(app.Channel5Panel, 'numeric');
            app.MininterbursttimemsEditField_4.FontSize = 9;
            app.MininterbursttimemsEditField_4.Position = [216 26 33 22];
            app.MininterbursttimemsEditField_4.Value = 100;

            % Create SpinalLevelEditField_5Label
            app.SpinalLevelEditField_5Label = uilabel(app.Channel5Panel);
            app.SpinalLevelEditField_5Label.HorizontalAlignment = 'right';
            app.SpinalLevelEditField_5Label.Position = [18 26 70 22];
            app.SpinalLevelEditField_5Label.Text = 'Spinal Level';

            % Create SpinalLevelEditField_5
            app.SpinalLevelEditField_5 = uieditfield(app.Channel5Panel, 'numeric');
            app.SpinalLevelEditField_5.Position = [10 3 100 22];

            % Create Channel6Panel
            app.Channel6Panel = uipanel(app.SpinalModSensory);
            app.Channel6Panel.TitlePosition = 'centertop';
            app.Channel6Panel.Title = 'Channel 6';
            app.Channel6Panel.FontWeight = 'bold';
            app.Channel6Panel.Position = [1 145 250 71];

            % Create MinburstdurationmsEditField_6Label
            app.MinburstdurationmsEditField_6Label = uilabel(app.Channel6Panel);
            app.MinburstdurationmsEditField_6Label.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditField_6Label.FontSize = 9;
            app.MinburstdurationmsEditField_6Label.Position = [112 2 99 22];
            app.MinburstdurationmsEditField_6Label.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_6
            app.MinburstdurationmsEditField_6 = uieditfield(app.Channel6Panel, 'numeric');
            app.MinburstdurationmsEditField_6.FontSize = 9;
            app.MinburstdurationmsEditField_6.Position = [214 2 33 22];
            app.MinburstdurationmsEditField_6.Value = 50;

            % Create MininterbursttimemsEditField_5Label
            app.MininterbursttimemsEditField_5Label = uilabel(app.Channel6Panel);
            app.MininterbursttimemsEditField_5Label.HorizontalAlignment = 'right';
            app.MininterbursttimemsEditField_5Label.FontSize = 9;
            app.MininterbursttimemsEditField_5Label.Position = [107 26 100 22];
            app.MininterbursttimemsEditField_5Label.Text = 'Min interburst time (ms)';

            % Create MininterbursttimemsEditField_5
            app.MininterbursttimemsEditField_5 = uieditfield(app.Channel6Panel, 'numeric');
            app.MininterbursttimemsEditField_5.FontSize = 9;
            app.MininterbursttimemsEditField_5.Position = [214 26 33 22];
            app.MininterbursttimemsEditField_5.Value = 100;

            % Create SpinalLevelEditField_6Label
            app.SpinalLevelEditField_6Label = uilabel(app.Channel6Panel);
            app.SpinalLevelEditField_6Label.HorizontalAlignment = 'right';
            app.SpinalLevelEditField_6Label.Position = [18 28 70 22];
            app.SpinalLevelEditField_6Label.Text = 'Spinal Level';

            % Create SpinalLevelEditField_6
            app.SpinalLevelEditField_6 = uieditfield(app.Channel6Panel, 'numeric');
            app.SpinalLevelEditField_6.Position = [10 5 100 22];

            % Create Channel7Panel
            app.Channel7Panel = uipanel(app.SpinalModSensory);
            app.Channel7Panel.TitlePosition = 'centertop';
            app.Channel7Panel.Title = 'Channel 7';
            app.Channel7Panel.FontWeight = 'bold';
            app.Channel7Panel.Position = [1 75 250 71];

            % Create MinburstdurationmsEditField_7Label
            app.MinburstdurationmsEditField_7Label = uilabel(app.Channel7Panel);
            app.MinburstdurationmsEditField_7Label.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditField_7Label.FontSize = 9;
            app.MinburstdurationmsEditField_7Label.Position = [112 2 99 22];
            app.MinburstdurationmsEditField_7Label.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_7
            app.MinburstdurationmsEditField_7 = uieditfield(app.Channel7Panel, 'numeric');
            app.MinburstdurationmsEditField_7.FontSize = 9;
            app.MinburstdurationmsEditField_7.Position = [214 2 33 22];
            app.MinburstdurationmsEditField_7.Value = 50;

            % Create MininterbursttimemsEditField_6Label
            app.MininterbursttimemsEditField_6Label = uilabel(app.Channel7Panel);
            app.MininterbursttimemsEditField_6Label.HorizontalAlignment = 'right';
            app.MininterbursttimemsEditField_6Label.FontSize = 9;
            app.MininterbursttimemsEditField_6Label.Position = [107 26 100 22];
            app.MininterbursttimemsEditField_6Label.Text = 'Min interburst time (ms)';

            % Create MininterbursttimemsEditField_6
            app.MininterbursttimemsEditField_6 = uieditfield(app.Channel7Panel, 'numeric');
            app.MininterbursttimemsEditField_6.FontSize = 9;
            app.MininterbursttimemsEditField_6.Position = [214 26 33 22];
            app.MininterbursttimemsEditField_6.Value = 100;

            % Create SpinalLevelEditField_8Label
            app.SpinalLevelEditField_8Label = uilabel(app.Channel7Panel);
            app.SpinalLevelEditField_8Label.HorizontalAlignment = 'right';
            app.SpinalLevelEditField_8Label.Position = [18 28 70 22];
            app.SpinalLevelEditField_8Label.Text = 'Spinal Level';

            % Create SpinalLevelEditField_8
            app.SpinalLevelEditField_8 = uieditfield(app.Channel7Panel, 'numeric');
            app.SpinalLevelEditField_8.Position = [10 5 100 22];

            % Create Channel8Panel
            app.Channel8Panel = uipanel(app.SpinalModSensory);
            app.Channel8Panel.TitlePosition = 'centertop';
            app.Channel8Panel.Title = 'Channel 8';
            app.Channel8Panel.FontWeight = 'bold';
            app.Channel8Panel.Position = [1 1 250 71];

            % Create MinburstdurationmsEditField_8Label
            app.MinburstdurationmsEditField_8Label = uilabel(app.Channel8Panel);
            app.MinburstdurationmsEditField_8Label.HorizontalAlignment = 'right';
            app.MinburstdurationmsEditField_8Label.FontSize = 9;
            app.MinburstdurationmsEditField_8Label.Position = [112 1 99 22];
            app.MinburstdurationmsEditField_8Label.Text = 'Min burst duration (ms)';

            % Create MinburstdurationmsEditField_8
            app.MinburstdurationmsEditField_8 = uieditfield(app.Channel8Panel, 'numeric');
            app.MinburstdurationmsEditField_8.FontSize = 9;
            app.MinburstdurationmsEditField_8.Position = [214 1 33 22];
            app.MinburstdurationmsEditField_8.Value = 50;

            % Create MininterbursttimemsEditField_7Label
            app.MininterbursttimemsEditField_7Label = uilabel(app.Channel8Panel);
            app.MininterbursttimemsEditField_7Label.HorizontalAlignment = 'right';
            app.MininterbursttimemsEditField_7Label.FontSize = 9;
            app.MininterbursttimemsEditField_7Label.Position = [107 26 100 22];
            app.MininterbursttimemsEditField_7Label.Text = 'Min interburst time (ms)';

            % Create MininterbursttimemsEditField_7
            app.MininterbursttimemsEditField_7 = uieditfield(app.Channel8Panel, 'numeric');
            app.MininterbursttimemsEditField_7.FontSize = 9;
            app.MininterbursttimemsEditField_7.Position = [214 26 33 22];
            app.MininterbursttimemsEditField_7.Value = 100;

            % Create SpinalLevelEditField_7Label
            app.SpinalLevelEditField_7Label = uilabel(app.Channel8Panel);
            app.SpinalLevelEditField_7Label.HorizontalAlignment = 'right';
            app.SpinalLevelEditField_7Label.Position = [18 27 70 22];
            app.SpinalLevelEditField_7Label.Text = 'Spinal Level';

            % Create SpinalLevelEditField_7
            app.SpinalLevelEditField_7 = uieditfield(app.Channel8Panel, 'numeric');
            app.SpinalLevelEditField_7.Position = [10 4 100 22];

            % Create RunBurstAnalysisButton
            app.RunBurstAnalysisButton = uibutton(app.SpinalModSensory, 'push');
            app.RunBurstAnalysisButton.ButtonPushedFcn = createCallbackFcn(app, @RunBurstAnalysisButtonPushed, true);
            app.RunBurstAnalysisButton.Tooltip = {'Run burst analysis for all channels'};
            app.RunBurstAnalysisButton.Position = [776 711 117 22];
            app.RunBurstAnalysisButton.Text = 'Run Burst Analysis';

            % Create RunPhaseAnalysisButton
            app.RunPhaseAnalysisButton = uibutton(app.SpinalModSensory, 'push');
            app.RunPhaseAnalysisButton.ButtonPushedFcn = createCallbackFcn(app, @RunPhaseAnalysisButtonPushed, true);
            app.RunPhaseAnalysisButton.Tooltip = {'Run phase analysis and burst time comparison for all channels'};
            app.RunPhaseAnalysisButton.Position = [905 711 117 22];
            app.RunPhaseAnalysisButton.Text = 'Run  Phase Analysis';

            % Create FileNameLabel
            app.FileNameLabel = uilabel(app.SpinalModSensory);
            app.FileNameLabel.HorizontalAlignment = 'right';
            app.FileNameLabel.Position = [233 711 59 22];
            app.FileNameLabel.Text = 'File Name';

            % Create DisplayFileName
            app.DisplayFileName = uieditfield(app.SpinalModSensory, 'text');
            app.DisplayFileName.Position = [307 711 100 22];
            app.DisplayFileName.Value = 'DisplayFileName';

            % Create HighPassHzKnobLabel
            app.HighPassHzKnobLabel = uilabel(app.SpinalModSensory);
            app.HighPassHzKnobLabel.HorizontalAlignment = 'center';
            app.HighPassHzKnobLabel.FontWeight = 'bold';
            app.HighPassHzKnobLabel.Position = [18 567 89 22];
            app.HighPassHzKnobLabel.Text = 'High Pass (Hz)';

            % Create HighPassHzKnob
            app.HighPassHzKnob = uiknob(app.SpinalModSensory, 'continuous');
            app.HighPassHzKnob.Limits = [1 100];
            app.HighPassHzKnob.MajorTicks = [1 10 20 30 40 50 60 70 80 90 100];
            app.HighPassHzKnob.MajorTickLabels = {'1', '10', '20', '30', '40', '50', '60', '70', '80', '90', '100'};
            app.HighPassHzKnob.ValueChangedFcn = createCallbackFcn(app, @HighPassHzKnobValueChanged, true);
            app.HighPassHzKnob.MinorTicks = [];
            app.HighPassHzKnob.FontWeight = 'bold';
            app.HighPassHzKnob.Position = [32 623 61 61];
            app.HighPassHzKnob.Value = 10;

            % Create LowPassKHzKnobLabel
            app.LowPassKHzKnobLabel = uilabel(app.SpinalModSensory);
            app.LowPassKHzKnobLabel.HorizontalAlignment = 'center';
            app.LowPassKHzKnobLabel.FontWeight = 'bold';
            app.LowPassKHzKnobLabel.Position = [132 569 95 22];
            app.LowPassKHzKnobLabel.Text = 'Low Pass (KHz)';

            % Create LowPassKHzKnob
            app.LowPassKHzKnob = uiknob(app.SpinalModSensory, 'continuous');
            app.LowPassKHzKnob.Limits = [0.1 5];
            app.LowPassKHzKnob.MajorTicks = [0.1 1 2 3 4 5 6 7 8 9 10];
            app.LowPassKHzKnob.ValueChangedFcn = createCallbackFcn(app, @LowPassKHzKnobValueChanged, true);
            app.LowPassKHzKnob.MinorTicks = [];
            app.LowPassKHzKnob.FontWeight = 'bold';
            app.LowPassKHzKnob.Position = [149 625 61 61];
            app.LowPassKHzKnob.Value = 1;

            % Create HighPassSwitch
            app.HighPassSwitch = uiswitch(app.SpinalModSensory, 'slider');
            app.HighPassSwitch.ItemsData = {'0', '1'};
            app.HighPassSwitch.ValueChangedFcn = createCallbackFcn(app, @HighPassSwitchValueChanged, true);
            app.HighPassSwitch.Position = [41 713 45 20];
            app.HighPassSwitch.Value = '1';

            % Create LowPassSwitch
            app.LowPassSwitch = uiswitch(app.SpinalModSensory, 'slider');
            app.LowPassSwitch.ItemsData = {'0', '1'};
            app.LowPassSwitch.ValueChangedFcn = createCallbackFcn(app, @LowPassSwitchValueChanged, true);
            app.LowPassSwitch.Position = [157 713 45 20];
            app.LowPassSwitch.Value = '0';

            % Create SpinalLevelEditField_2Label
            app.SpinalLevelEditField_2Label = uilabel(app.SpinalModSensory);
            app.SpinalLevelEditField_2Label.HorizontalAlignment = 'right';
            app.SpinalLevelEditField_2Label.Position = [19 452 70 22];
            app.SpinalLevelEditField_2Label.Text = 'Spinal Level';

            % Create SpinalLevelEditField_2
            app.SpinalLevelEditField_2 = uieditfield(app.SpinalModSensory, 'numeric');
            app.SpinalLevelEditField_2.Position = [11 429 100 22];

            % Create SpinalLevelEditField_3Label
            app.SpinalLevelEditField_3Label = uilabel(app.SpinalModSensory);
            app.SpinalLevelEditField_3Label.HorizontalAlignment = 'right';
            app.SpinalLevelEditField_3Label.Position = [19 381 70 22];
            app.SpinalLevelEditField_3Label.Text = 'Spinal Level';

            % Create SpinalLevelEditField_3
            app.SpinalLevelEditField_3 = uieditfield(app.SpinalModSensory, 'numeric');
            app.SpinalLevelEditField_3.Position = [11 358 100 22];

            % Create PlotspikerastersButton
            app.PlotspikerastersButton = uibutton(app.SpinalModSensory, 'push');
            app.PlotspikerastersButton.ButtonPushedFcn = createCallbackFcn(app, @PlotspikerastersButtonPushed, true);
            app.PlotspikerastersButton.Tooltip = {'Plot rasters of spiking for each channel '};
            app.PlotspikerastersButton.Position = [1034 711 117 22];
            app.PlotspikerastersButton.Text = 'Plot spike rasters';

            % Create StimSwitch
            app.StimSwitch = uiswitch(app.SpinalModSensory, 'slider');
            app.StimSwitch.Items = {'Spontaneous', 'Stimulation'};
            app.StimSwitch.ItemsData = [0 1];
            app.StimSwitch.Position = [501 712 45 20];
            app.StimSwitch.Value = 0;

            % Create ClearallButton
            app.ClearallButton = uibutton(app.SpinalModSensory, 'push');
            app.ClearallButton.ButtonPushedFcn = createCallbackFcn(app, @ClearallButtonPushed, true);
            app.ClearallButton.BackgroundColor = [0 0 0];
            app.ClearallButton.FontColor = [1 0 0];
            app.ClearallButton.Position = [639 712 100 22];
            app.ClearallButton.Text = 'Clear all';

            % Show the figure after all components are created
            app.SpinalModSensory.Visible = 'on';
        end
    end

    % App creation and deletion
    methods (Access = public)

        % Construct app
        function app = SpinalSensoryBursting

            % Create UIFigure and components
            createComponents(app)

            % Register the app with App Designer
            registerApp(app, app.SpinalModSensory)

            % Execute the startup function
            runStartupFcn(app, @startupFcn)

            if nargout == 0
                clear app
            end
        end

        % Code that executes before app deletion
        function delete(app)

            % Delete UIFigure when app is deleted
            delete(app.SpinalModSensory)
        end
    end
end
